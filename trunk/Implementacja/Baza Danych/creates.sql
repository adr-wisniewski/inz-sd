-- Generated by Oracle SQL Developer Data Modeler 3.0.0.665
--   at:        2011-08-15 12:32:56 CEST
--   site:      Oracle Database 10g
--   type:      Oracle Database 10g



CREATE CLUSTER NOTIFICATIONS_CLUSTER 
    ( NOTIFICATION_ID NUMERIC (10) ) 
    INDEX 
    NOPARALLEL 
    NOROWDEPENDENCIES 
    NOCACHE 
;
CREATE CLUSTER USERS_CLUSTER 
    ( USER_ID NUMERIC (10) ) 
    INDEX 
    NOPARALLEL 
    NOROWDEPENDENCIES 
    NOCACHE 
;
CREATE INDEX CI1 ON 
    CLUSTER USERS_CLUSTER 
    LOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE INDEX CI2 ON 
    CLUSTER NOTIFICATIONS_CLUSTER 
    LOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE TABLE AGREEMENTS 
    ( 
     AGREEMENT_ID NUMBER (10)  NOT NULL , 
     START_HOUR NUMBER (2)  NOT NULL , 
     END_HOUR NUMBER (2)  NOT NULL , 
     RESOLUTION_TIME NUMBER (2)  NOT NULL , 
     AVAILABILITY NUMBER (4,2) 
    ) LOGGING 
;



ALTER TABLE AGREEMENTS 
    ADD CONSTRAINT SLA_PK PRIMARY KEY ( AGREEMENT_ID ) ;


CREATE TABLE ANNOUNCEMENTS 
    ( 
     ANNOUNCEMENT_ID NUMBER (10)  NOT NULL , 
     TITLE VARCHAR2 (500)  NOT NULL , 
     CONTENT VARCHAR2 (4000)  NOT NULL , 
     AUTHOR NUMBER (10)  NOT NULL , 
     PUBLICATION_TIME DATE  NOT NULL 
    ) LOGGING 
;



ALTER TABLE ANNOUNCEMENTS 
    ADD CONSTRAINT ANNOUNCEMENTS_PK PRIMARY KEY ( ANNOUNCEMENT_ID ) ;


CREATE TABLE ANNOUNCEMENT_ATTACHMENTS 
    ( 
     ANNOUNCEMENT_ID NUMBER (10)  NOT NULL , 
     ATTACHMENT_ID NUMBER (10)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE ANNOUNCEMENT_ATTACHMENTS 
    ADD CONSTRAINT ANNOUNCEMENT_ATTACHMENTS_PK PRIMARY KEY ( ATTACHMENT_ID, ANNOUNCEMENT_ID ) ;


CREATE TABLE ATTACHMENTS 
    ( 
     ATTACHMENT_ID NUMBER (10)  NOT NULL , 
     NAME VARCHAR2 (500)  NOT NULL , 
     DATA BLOB  NOT NULL 
    ) LOGGING 
;



ALTER TABLE ATTACHMENTS 
    ADD CONSTRAINT ATTACHMENTS_PK PRIMARY KEY ( ATTACHMENT_ID ) ;


CREATE TABLE AUDITREVISION 
    ( 
     ID NUMBER (10)  NOT NULL , 
     TIMESTAMP TIMESTAMP  NOT NULL , 
     USER_ID NUMBER (10)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE AUDITREVISION 
    ADD CONSTRAINT AUDITREVISION_PK PRIMARY KEY ( ID ) ;


CREATE TABLE C2_CLASSES 
    ( 
     CLASS_ID NUMBER (10)  NOT NULL , 
     VERSION NUMBER (10) DEFAULT 0  NOT NULL , 
     NAME VARCHAR2 (200)  NOT NULL , 
     DESCRIPTION VARCHAR2 (2000)  NOT NULL , 
     IS_ABSTRACT CHAR (1)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE C2_CLASSES 
    ADD CONSTRAINT C2_CLASS_CHK1 
    CHECK ( IS_ABSTRACT IN ('Y', 'N')) 
;


ALTER TABLE C2_CLASSES 
    ADD CONSTRAINT C2_CLASS_DESCRIPTOR_PK PRIMARY KEY ( CLASS_ID ) ;


CREATE TABLE C2_CLASS_ATTRIBUTES 
    ( 
     ATTRIBUTE_ID NUMBER (10)  NOT NULL , 
     CLASS_ID NUMBER (10)  NOT NULL , 
     VERSION NUMBER (10) DEFAULT 0  NOT NULL , 
     NAME VARCHAR2 (200)  NOT NULL , 
     DESCRIPTION VARCHAR2 (2000)  NOT NULL , 
     DISPLAY_NO NUMBER (10)  NOT NULL , 
     IS_OVERVIEW CHAR (1)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE C2_CLASS_ATTRIBUTES 
    ADD CONSTRAINT C2_CLASS_ATTRIBUTES_CHK1 
    CHECK ( IS_OVERVIEW IN ('Y', 'N')) 
;


ALTER TABLE C2_CLASS_ATTRIBUTES 
    ADD CONSTRAINT C2_CLASS_ATTRIBUTES_PK PRIMARY KEY ( ATTRIBUTE_ID ) ;


CREATE TABLE C2_CLASS_ATTRIBUTE_VALUES 
    ( 
     ENTITY_ID NUMBER (10)  NOT NULL , 
     ATTRIBITE_ID NUMBER (10)  NOT NULL , 
     VALUE VARCHAR2 (2000) 
    ) LOGGING 
;



ALTER TABLE C2_CLASS_ATTRIBUTE_VALUES 
    ADD CONSTRAINT C2_CLASS_ATTRIBUTE_VALUES_PK PRIMARY KEY ( ENTITY_ID, ATTRIBITE_ID ) ;


CREATE TABLE C2_ENTITIES 
    ( 
     ENTITY_ID NUMBER (10)  NOT NULL , 
     VERSION NUMBER (10) DEFAULT 0  NOT NULL 
    ) LOGGING 
;



ALTER TABLE C2_ENTITIES 
    ADD CONSTRAINT C2_ITEM_BASE_PK PRIMARY KEY ( ENTITY_ID ) ;


CREATE TABLE C2_ITEMS 
    ( 
     ITEM_ID NUMBER (10)  NOT NULL , 
     LABEL VARCHAR2 (50)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE C2_ITEMS 
    ADD CONSTRAINT C2_ITEMS_PK PRIMARY KEY ( ITEM_ID ) ;

ALTER TABLE C2_ITEMS 
    ADD CONSTRAINT C2_ITEMS_UK1 UNIQUE ( LABEL ) ;


CREATE TABLE C2_ITEMS_EMPLOYEE 
    ( 
     ITEM_ID NUMBER (10)  NOT NULL , 
     EMPLOYEE_ID NUMBER (10)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE C2_ITEMS_EMPLOYEE 
    ADD CONSTRAINT C2_EMPLOYEE_ITEMS_PK PRIMARY KEY ( ITEM_ID ) ;


CREATE TABLE C2_ITEMS_INCIDENT 
    ( 
     ITEM_ID NUMBER (10)  NOT NULL , 
     INCIDENT_ID NUMBER (10)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE C2_ITEMS_INCIDENT 
    ADD CONSTRAINT C2_INCIDENT_ITEMS_PK PRIMARY KEY ( ITEM_ID ) ;


CREATE TABLE C2_ITEMS_PROBLEM 
    ( 
     ITEM_ID NUMBER (10)  NOT NULL , 
     PROBLEM_ID NUMBER (10)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE C2_ITEMS_PROBLEM 
    ADD CONSTRAINT C2_PROBLEM_ITEMS_PK PRIMARY KEY ( ITEM_ID ) ;


CREATE TABLE C2_ITEMS_RFC 
    ( 
     ITEM_ID NUMBER (10)  NOT NULL , 
     RFC_ID NUMBER (10)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE C2_ITEMS_RFC 
    ADD CONSTRAINT C2_RFC_ITEMS_PK PRIMARY KEY ( ITEM_ID ) ;


CREATE TABLE C2_ITEMS_SERVICE 
    ( 
     ITEM_ID NUMBER (10)  NOT NULL , 
     SERVICE_ID NUMBER (10)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE C2_ITEMS_SERVICE 
    ADD CONSTRAINT C2_SERVICE_ITEMS_PK PRIMARY KEY ( ITEM_ID ) ;


CREATE TABLE C2_ITEMS_UNIVERSAL 
    ( 
     ITEM_ID NUMBER (10)  NOT NULL , 
     CLASS_ID NUMBER (10)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE C2_ITEMS_UNIVERSAL 
    ADD CONSTRAINT C2_UNIVERSAL_ITEMS_PK PRIMARY KEY ( ITEM_ID ) ;


CREATE TABLE C2_ITEM_CLASSES 
    ( 
     CLASS_ID NUMBER (10)  NOT NULL , 
     PARENT_CLASS_ID NUMBER (10) 
    ) LOGGING 
;



ALTER TABLE C2_ITEM_CLASSES 
    ADD CONSTRAINT C2_ITEM_DESCRIPTOR_PK PRIMARY KEY ( CLASS_ID ) ;


CREATE TABLE C2_RELATIONS 
    ( 
     RELATION_ID NUMBER (10)  NOT NULL , 
     RELATION_CLASS_ID NUMBER (10)  NOT NULL , 
     SOURCE_ITEM_ID NUMBER (10)  NOT NULL , 
     TARGET_ITEM_ID NUMBER (10)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE C2_RELATIONS 
    ADD CONSTRAINT C2_RELATIONS_PK PRIMARY KEY ( RELATION_ID ) ;


CREATE TABLE C2_RELATION_CLASSES 
    ( 
     CLASS_ID NUMBER (10)  NOT NULL , 
     SOURCE_TYPE CHAR (3)  NOT NULL , 
     TARGET_TYPE CHAR (3)  NOT NULL , 
     LABEL VARCHAR2 (200)  NOT NULL , 
     LABEL_REVERSE VARCHAR2 (200) , 
     PARENT_CLASS_ID NUMBER (10) , 
     SOURCE_CLASS_ID NUMBER (10) , 
     TARGET_CLASS_ID NUMBER (10) 
    ) LOGGING 
;



ALTER TABLE C2_RELATION_CLASSES 
    ADD CONSTRAINT C2_RELATION_CLASS_CHK1 
    CHECK ((SOURCE_TYPE = 'UNI' AND SOURCE_CLASS_ID IS NOT NULL) OR (SOURCE_TYPE != 'UNI' AND SOURCE_CLASS_ID IS NULL))
        INITIALLY IMMEDIATE 
        ENABLE 
        VALIDATE 
;


ALTER TABLE C2_RELATION_CLASSES 
    ADD CONSTRAINT C2_RELATION_CLASS_CHK2 
    CHECK ((TARGET_TYPE = 'UNI' AND TARGET_CLASS_ID IS NOT NULL) OR (TARGET_TYPE != 'UNI' AND TARGET_CLASS_ID IS NULL) )
        INITIALLY IMMEDIATE 
        ENABLE 
        VALIDATE 
;


ALTER TABLE C2_RELATION_CLASSES 
    ADD CONSTRAINT C2_RELATION_CLASSES_C1 
    CHECK ( SOURCE_TYPE IN ( 'UNI', 'EMP', 'INC', 'PRB', 'RFC', 'SVC', 'ANY'))
        INITIALLY IMMEDIATE 
        ENABLE 
        VALIDATE 
;


ALTER TABLE C2_RELATION_CLASSES 
    ADD CONSTRAINT C2_RELATION_CLASSES_C2 
    CHECK ( TARGET_TYPE IN ( 'UNI', 'EMP', 'INC', 'PRB', 'RFC', 'SVC', 'ANY'))
        INITIALLY IMMEDIATE 
        ENABLE 
        VALIDATE 
;


ALTER TABLE C2_RELATION_CLASSES 
    ADD CONSTRAINT C2_RELATION_DESCRIPTOR_PK PRIMARY KEY ( CLASS_ID ) ;


CREATE TABLE CATEGORIES_EM 
    ( 
     CATEGORY_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE) , 
     PARENT_CATEGORY CHAR (4 BYTE) 
    ) LOGGING 
;



COMMENT ON TABLE CATEGORIES_EM IS 'S³ownik kategorii dla zdarzeñ.'
;

ALTER TABLE CATEGORIES_EM 
    ADD CONSTRAINT EVENT_CATEGORIES_PK PRIMARY KEY ( CATEGORY_CODE ) ;


CREATE TABLE CATEGORIES_IM 
    ( 
     CATEGORY_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (50 BYTE) , 
     PARENT_CATEGORY CHAR (4 BYTE) , 
     GROUP_ID NUMBER (10) 
    ) LOGGING 
;



COMMENT ON TABLE CATEGORIES_IM IS 'S³ownik z kategoriami incydentów'
;

COMMENT ON COLUMN CATEGORIES_IM.CATEGORY_CODE IS 'Identyfikator kategorii' 
;

COMMENT ON COLUMN CATEGORIES_IM.NAME IS 'Nazwa kategorii' 
;

COMMENT ON COLUMN CATEGORIES_IM.PARENT_CATEGORY IS 'Identyfikator kategorii nadrzêdnej' 
;

ALTER TABLE CATEGORIES_IM 
    ADD CONSTRAINT INCIDENT_CATEGORY_PK PRIMARY KEY ( CATEGORY_CODE ) ;


CREATE TABLE CATEGORIES_PM 
    ( 
     CATEGORY_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE)  NOT NULL , 
     GROUP_ID NUMBER (10) , 
     PARENT_CATEGORY CHAR (4 BYTE) 
    ) LOGGING 
;



ALTER TABLE CATEGORIES_PM 
    ADD CONSTRAINT CATEGORIES_PM_PK PRIMARY KEY ( CATEGORY_CODE ) ;


CREATE TABLE CATEGORIES_RF 
    ( 
     CATEGORY_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE) , 
     PARENT_CATEGORY CHAR (4 BYTE) 
    ) LOGGING 
;



COMMENT ON TABLE CATEGORIES_RF IS 'S³ownik z mo¿liwymi typami kategorii dla zg³oszeñ.'
;

ALTER TABLE CATEGORIES_RF 
    ADD CONSTRAINT CATEGORIES_RF_PK PRIMARY KEY ( CATEGORY_CODE ) ;


CREATE TABLE CLIENTS 
    ( 
     CLIENT_ID NUMBER (10)  NOT NULL , 
     NAME VARCHAR2 (30 BYTE)  NOT NULL , 
     SURNAME VARCHAR2 (30 BYTE)  NOT NULL , 
     EMAIL VARCHAR2 (30 BYTE) , 
     PHONE_NUMBER VARCHAR2 (20 BYTE) , 
     MOBILE_PHONE VARCHAR2 (20 BYTE) 
    ) LOGGING 
;



ALTER TABLE CLIENTS 
    ADD CONSTRAINT PEOPLE_PK PRIMARY KEY ( CLIENT_ID ) ;


CREATE TABLE CLIENT_USERS 
    ( 
     USER_ID NUMBER (10)  NOT NULL , 
     CLIENT_ID NUMBER (10)  NOT NULL 
    ) 
    CLUSTER USERS_CLUSTER ( USER_ID ) 
;



ALTER TABLE CLIENT_USERS 
    ADD CONSTRAINT CLIENT_USERS_PK PRIMARY KEY ( USER_ID ) ;

ALTER TABLE CLIENT_USERS 
    ADD CONSTRAINT CLIENT_USERS_UK1 UNIQUE ( CLIENT_ID ) ;


CREATE TABLE COMMENTS 
    ( 
     COMMENT_ID NUMBER (10)  NOT NULL , 
     TEXT VARCHAR2 (4000 BYTE) , 
     CREATION_DATE DATE  NOT NULL , 
     EVENT_ID NUMBER (10) , 
     EMPLOYEE_ID NUMBER (10) , 
     PROBLEM_ID NUMBER (10) , 
     INCIDENT_ID NUMBER (10) , 
     REQUEST_ID NUMBER (10) 
    ) LOGGING 
;



COMMENT ON TABLE COMMENTS IS 'Tabela z komentarzami'
;

COMMENT ON COLUMN COMMENTS.TEXT IS 'Treæ komentarza' 
;

COMMENT ON COLUMN COMMENTS.CREATION_DATE IS 'Data dodania komentarza' 
;

COMMENT ON COLUMN COMMENTS.EMPLOYEE_ID IS 'Pracownik, który doda³ komentarz' 
;

ALTER TABLE COMMENTS 
    ADD CONSTRAINT PROBLEM_COMMENTS_PK PRIMARY KEY ( COMMENT_ID ) ;


CREATE TABLE COOPERANTS 
    ( 
     COOPERANT_ID NUMBER (10)  NOT NULL , 
     ORGANIZATION_ID NUMBER (10)  NOT NULL , 
     NAME VARCHAR2 (30 BYTE)  NOT NULL , 
     SURNAME VARCHAR2 (30 BYTE)  NOT NULL , 
     EMAIL VARCHAR2 (30 BYTE) , 
     PHONE_NUMBER VARCHAR2 (20 BYTE) , 
     MOBILE_PHONE VARCHAR2 (20 BYTE) 
    ) LOGGING 
;



ALTER TABLE COOPERANTS 
    ADD CONSTRAINT COOPERANTS_PK PRIMARY KEY ( COOPERANT_ID ) ;


CREATE TABLE COOPERANT_USERS 
    ( 
     USER_ID NUMBER (10)  NOT NULL , 
     COOPERANT_ID NUMBER (10)  NOT NULL 
    ) 
    CLUSTER USERS_CLUSTER ( USER_ID ) 
;



ALTER TABLE COOPERANT_USERS 
    ADD CONSTRAINT COOPERANT_USERS_PK PRIMARY KEY ( USER_ID ) ;

ALTER TABLE COOPERANT_USERS 
    ADD CONSTRAINT COOPERANT_USERS_UK1 UNIQUE ( COOPERANT_ID ) ;


CREATE TABLE DEPARTMENTS 
    ( 
     DEPARTMENT_ID NUMBER (4)  NOT NULL , 
     DEPARTMENT_NAME VARCHAR2 (30 BYTE)  NOT NULL , 
     MANAGER_ID NUMBER (10) 
    ) LOGGING 
;



ALTER TABLE DEPARTMENTS 
    ADD CONSTRAINT DEPT_NAME_NN 
    CHECK ( DEPARTMENT_NAME IS NOT NULL) 
;


COMMENT ON TABLE DEPARTMENTS IS 'S³ownik z departamentami.'
;

COMMENT ON COLUMN DEPARTMENTS.DEPARTMENT_ID IS 'Primary key column of departments table.' 
;

COMMENT ON COLUMN DEPARTMENTS.DEPARTMENT_NAME IS 'A not null column that shows name of a department. Administration,
Marketing, Purchasing, Human Resources, Shipping, IT, Executive, Public
Relations, Sales, Finance, and Accounting. ' 
;

COMMENT ON COLUMN DEPARTMENTS.MANAGER_ID IS 'Manager_id of a department. Foreign key to employee_id column of employees table. The manager_id column of the employee table references this column.' 
;

ALTER TABLE DEPARTMENTS 
    ADD CONSTRAINT DEPT_ID_PK PRIMARY KEY ( DEPARTMENT_ID ) ;


CREATE TABLE EMPLOYEES 
    ( 
     EMPLOYEE_ID NUMBER (10)  NOT NULL , 
     NAME VARCHAR2 (30 BYTE)  NOT NULL , 
     SURNAME VARCHAR2 (30 BYTE)  NOT NULL , 
     EMAIL VARCHAR2 (30 BYTE)  NOT NULL , 
     PHONE_NUMBER VARCHAR2 (20 BYTE) , 
     MOBILE_PHONE VARCHAR2 (20 BYTE) , 
     MANAGER_ID NUMBER (10) , 
     DEPARTMENT_ID NUMBER (4) , 
     JOB_CODE VARCHAR2 (10 BYTE) 
    ) LOGGING 
;



COMMENT ON TABLE EMPLOYEES IS 'Tabela z pracownikami'
;

ALTER TABLE EMPLOYEES 
    ADD CONSTRAINT EMPLOYEES_PK PRIMARY KEY ( EMPLOYEE_ID ) ;


CREATE TABLE EMPLOYEE_SERVICE 
    ( 
     EMPLOYEE_ID NUMBER (10)  NOT NULL , 
     SERVICE_ID NUMBER (10)  NOT NULL , 
     AGREEMENT_ID NUMBER (10) 
    ) LOGGING 
;



ALTER TABLE EMPLOYEE_SERVICE 
    ADD CONSTRAINT EMPLOYEE_SERVICE_PK PRIMARY KEY ( SERVICE_ID, EMPLOYEE_ID ) ;


CREATE TABLE EMPLOYEE_USERS 
    ( 
     USER_ID NUMBER (10)  NOT NULL , 
     EMPLOYEE_ID NUMBER (10)  NOT NULL 
    ) 
    CLUSTER USERS_CLUSTER ( USER_ID ) 
;



ALTER TABLE EMPLOYEE_USERS 
    ADD CONSTRAINT EMPLOYEE_USERS_PK PRIMARY KEY ( USER_ID ) ;

ALTER TABLE EMPLOYEE_USERS 
    ADD CONSTRAINT EMPLOYEE_USERS_UK1 UNIQUE ( EMPLOYEE_ID ) ;


CREATE TABLE EVENTS 
    ( 
     EVENT_ID NUMBER (10)  NOT NULL , 
     SIGNIFICANCE_CODE CHAR (4 BYTE)  NOT NULL , 
     EVENT_DATE DATE  NOT NULL , 
     CREATION_DATE DATE  NOT NULL , 
     SUBJECT VARCHAR2 (1000 BYTE)  NOT NULL , 
     CATEGORY_CODE CHAR (4 BYTE)  NOT NULL , 
     INCIDENT_ID NUMBER (10) 
    ) LOGGING 
;



COMMENT ON TABLE EVENTS IS 'Zdarzenia'
;

ALTER TABLE EVENTS 
    ADD CONSTRAINT EVENTS_PK PRIMARY KEY ( EVENT_ID ) ;


CREATE TABLE EVENT_INCIDENT 
    ( 
     EVENT_ID NUMBER (10)  NOT NULL , 
     INCIDENT_ID NUMBER (10)  NOT NULL 
    ) LOGGING 
;



COMMENT ON TABLE EVENT_INCIDENT IS 'Tabela asocjacyjna powi¹zuj¹ca zdarzenie z incydentem.'
;

ALTER TABLE EVENT_INCIDENT 
    ADD CONSTRAINT EVENT_INCIDENT_PK PRIMARY KEY ( INCIDENT_ID, EVENT_ID ) ;


CREATE TABLE EVENT_PARAMETERS 
    ( 
     PARAMETER_ID NUMBER (10)  NOT NULL , 
     EVENT_ID NUMBER (10)  NOT NULL , 
     PARAM_NAME VARCHAR2 (200 BYTE)  NOT NULL , 
     PARAM_VALUE VARCHAR2 (4000 BYTE)  NOT NULL 
    ) LOGGING 
;



COMMENT ON TABLE EVENT_PARAMETERS IS 'Lista wartoci parametrów dla konkretnego zdarzenia.'
;

ALTER TABLE EVENT_PARAMETERS 
    ADD CONSTRAINT EVENT_PARAMETERS_PK PRIMARY KEY ( PARAMETER_ID ) ;


CREATE TABLE EVENT_SIGNIFICANCE_TYPES 
    ( 
     SIGNIFICANCE_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE)  NOT NULL 
    ) LOGGING 
;



COMMENT ON TABLE EVENT_SIGNIFICANCE_TYPES IS 'S³ownik rang dla zdarzeñ. Przyk³adowe rangi to: informacje, ostrze¿enie, b³¹d.'
;

ALTER TABLE EVENT_SIGNIFICANCE_TYPES 
    ADD CONSTRAINT EVENT_TYPES_PK PRIMARY KEY ( SIGNIFICANCE_CODE ) ;


CREATE TABLE GROUP_MEMBER 
    ( 
     GROUP_ID NUMBER (10)  NOT NULL , 
     EMPLOYEE_ID NUMBER (10) 
    ) LOGGING 
;



COMMENT ON TABLE GROUP_MEMBER IS 'Tabela asocjacyjna zawieraj¹ca listê cz³onków danej grupy wsparcia.'
;

ALTER TABLE GROUP_MEMBER 
    ADD CONSTRAINT GROUP_MEMBER_PK PRIMARY KEY ( GROUP_ID ) ;


CREATE TABLE IMPACT_TYPES_IM 
    ( 
     IMPACT_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE) 
    ) LOGGING 
;



COMMENT ON TABLE IMPACT_TYPES_IM IS 'S³ownik z typami wp³ywów dla incydentów.'
;

ALTER TABLE IMPACT_TYPES_IM 
    ADD CONSTRAINT IMPACT_TYPES_PK PRIMARY KEY ( IMPACT_CODE ) ;


CREATE TABLE IMPACT_TYPES_PM 
    ( 
     IMPACT_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE) 
    ) LOGGING 
;



COMMENT ON TABLE IMPACT_TYPES_PM IS 'S³ownik z typami wp³ywów dla problemów.'
;

ALTER TABLE IMPACT_TYPES_PM 
    ADD CONSTRAINT IMPACT_TYPES_PM_PK PRIMARY KEY ( IMPACT_CODE ) ;


CREATE TABLE IMPACT_URGENCY_IM 
    ( 
     IMPACT_CODE CHAR (4 BYTE)  NOT NULL , 
     URGENCY_CODE CHAR (4 BYTE)  NOT NULL , 
     PRIORITY_CODE CHAR (4 BYTE) 
    ) LOGGING 
;



ALTER TABLE IMPACT_URGENCY_IM 
    ADD CONSTRAINT IMPACT_URGENCY_PK PRIMARY KEY ( URGENCY_CODE, IMPACT_CODE ) ;


CREATE TABLE INCIDENTS 
    ( 
     INCIDENT_ID NUMBER (10)  NOT NULL , 
     LAST_EDIT_BY NUMBER (10) , 
     IMPACT_CODE CHAR (4 BYTE) , 
     URGENCY_CODE CHAR (4 BYTE) , 
     STATUS_CODE CHAR (4 BYTE) DEFAULT 'OPEN'  NOT NULL , 
     REVIEW VARCHAR2 (1024 BYTE) , 
     PRIORITY_CODE CHAR (4 BYTE) , 
     AUTHOR NUMBER (10)  NOT NULL , 
     CATEGORY_CODE CHAR (4 BYTE) , 
     CREATION_DATE DATE  NOT NULL , 
     CLOSURE_DATE DATE , 
     SUBJECT VARCHAR2 (100 BYTE)  NOT NULL , 
     DESCRIPTION VARCHAR2 (4000 BYTE)  NOT NULL , 
     STAFF_MEMBER NUMBER (10) , 
     RESOLUTION VARCHAR2 (4000 BYTE) , 
     SOURCE_CODE CHAR (4 BYTE) , 
     RESOLUTION_DATE DATE , 
     GROUP_ID NUMBER (10) , 
     TARGET_RESOLUTION_DATE DATE , 
     SERVICE_ID NUMBER (10) 
    ) LOGGING 
;



COMMENT ON TABLE INCIDENTS IS 'Incydenty'
;

ALTER TABLE INCIDENTS 
    ADD CONSTRAINT INCIDENTS_PK PRIMARY KEY ( INCIDENT_ID ) ;


CREATE TABLE INCIDENTS_HISTORY 
    ( 
     HISTORY_ID NUMBER (12)  NOT NULL , 
     CHANGE_DATE DATE  NOT NULL , 
     EMPLOYEE_ID NUMBER (10)  NOT NULL , 
     INCIDENT_ID NUMBER (10)  NOT NULL , 
     IMPACT_CODE CHAR (4 BYTE) , 
     URGENCY_CODE CHAR (4 BYTE) , 
     STATUS_CODE CHAR (4 BYTE) , 
     REVIEW VARCHAR2 (1024 BYTE) , 
     PRIORITY_CODE CHAR (4 BYTE) , 
     CATEGORY_CODE CHAR (4 BYTE) , 
     SUBJECT VARCHAR2 (100 BYTE) , 
     DESCRIPTION VARCHAR2 (4000 BYTE) , 
     STAFF_MEMBER NUMBER (10) , 
     RESOLUTION VARCHAR2 (4000 BYTE) , 
     SOURCE_CODE CHAR (4 BYTE) , 
     RESOLUTION_DATE DATE , 
     GROUP_ID NUMBER (10) , 
     TARGET_RESOLUTION_DATE DATE , 
     CLOSURE_DATE DATE , 
     SERVICE_ID NUMBER (10) 
    ) LOGGING 
;



COMMENT ON TABLE INCIDENTS_HISTORY IS 'Historia incydentów. Przy ka¿dej zmianie stanu incydentu wstawiany jest wiersz do tej tabeli.'
;

ALTER TABLE INCIDENTS_HISTORY 
    ADD CONSTRAINT INCIDENTS_HISTORY_PK PRIMARY KEY ( HISTORY_ID ) ;


CREATE TABLE INCIDENT_PROBLEM 
    ( 
     INCIDENT_ID NUMBER (10)  NOT NULL , 
     PROBLEM_ID NUMBER (10)  NOT NULL 
    ) LOGGING 
;



COMMENT ON TABLE INCIDENT_PROBLEM IS 'Tabela asocjacyjna pomiêdzy problemami oraz incydentami.'
;

ALTER TABLE INCIDENT_PROBLEM 
    ADD CONSTRAINT INCIDENT_PROBLEM_PK PRIMARY KEY ( INCIDENT_ID, PROBLEM_ID ) ;


CREATE TABLE JOBS 
    ( 
     JOB_CODE VARCHAR2 (10 BYTE)  NOT NULL , 
     JOB_TITLE VARCHAR2 (35 BYTE)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE JOBS 
    ADD CONSTRAINT JOB_TITLE_NN 
    CHECK ( JOB_TITLE IS NOT NULL) 
;


COMMENT ON TABLE JOBS IS 'S³ownik z mo¿liwymi typami stanowisk.'
;

COMMENT ON COLUMN JOBS.JOB_CODE IS 'Primary key of jobs table.' 
;

COMMENT ON COLUMN JOBS.JOB_TITLE IS 'A not null column that shows job title, e.g. AD_VP, FI_ACCOUNTANT' 
;

ALTER TABLE JOBS 
    ADD CONSTRAINT JOB_ID_PK PRIMARY KEY ( JOB_CODE ) ;


CREATE TABLE NOTIFICATIONS 
    ( 
     NOTIFICATION_ID NUMBER (10)  NOT NULL , 
     USER_ID NUMBER (10)  NOT NULL , 
     VISITED CHAR (1 CHAR) DEFAULT 'N'  NOT NULL , 
     TIMESTAMP TIMESTAMP  NOT NULL , 
     INSTIGATOR_ID NUMBER (10) 
    ) 
    CLUSTER NOTIFICATIONS_CLUSTER ( NOTIFICATION_ID ) 
;



ALTER TABLE NOTIFICATIONS 
    ADD CONSTRAINT NOTIFICATIONS_CK 
    CHECK (VISITED IN ('Y', 'N'))
        INITIALLY IMMEDIATE 
        ENABLE 
        VALIDATE 
;


ALTER TABLE NOTIFICATIONS 
    ADD CONSTRAINT MESSAGES_PK PRIMARY KEY ( NOTIFICATION_ID ) ;


CREATE TABLE ORGANIZATIONS 
    ( 
     ORGANIZATION_ID NUMBER (10)  NOT NULL , 
     NAME VARCHAR2 (20)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE ORGANIZATIONS 
    ADD CONSTRAINT ORGANIZATIONS_PK PRIMARY KEY ( ORGANIZATION_ID ) ;


CREATE TABLE PRIORITY_TYPES_IM 
    ( 
     PRIORITY_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE) , 
     TARGET_RESOLUTION_TIME NUMBER (2)  NOT NULL 
    ) LOGGING 
;



COMMENT ON TABLE PRIORITY_TYPES_IM IS 'S³ownik z mo¿liwymi priorytetami dla incydentów.'
;

COMMENT ON COLUMN PRIORITY_TYPES_IM.TARGET_RESOLUTION_TIME IS 'Czas rozwi¹zania incydentu w godzinach.' 
;

ALTER TABLE PRIORITY_TYPES_IM 
    ADD CONSTRAINT PRIORITY_TYPES_PK PRIMARY KEY ( PRIORITY_CODE ) ;


CREATE TABLE PRIORITY_TYPES_PM 
    ( 
     PRIORITY_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE) 
    ) LOGGING 
;



COMMENT ON TABLE PRIORITY_TYPES_PM IS 'S³ownik z typami priorytetów dla problemów.'
;

ALTER TABLE PRIORITY_TYPES_PM 
    ADD CONSTRAINT PRIORITY_TYPES_PM_PK PRIMARY KEY ( PRIORITY_CODE ) ;


CREATE TABLE PRIORITY_TYPES_RF 
    ( 
     PRIORITY_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE)  NOT NULL , 
     TARGET_RESOLUTION_TIME NUMBER (2) 
    ) LOGGING 
;



COMMENT ON TABLE PRIORITY_TYPES_RF IS 'S³ownik z mo¿liwymi typami priorytetów dla zg³oszeñ.'
;

ALTER TABLE PRIORITY_TYPES_RF 
    ADD CONSTRAINT PRIORITY_TYPES_RF_PK PRIMARY KEY ( PRIORITY_CODE ) ;


CREATE TABLE PRIVILEGE_TYPES 
    ( 
     PRIVILEGE_CODE VARCHAR2 (40 BYTE)  NOT NULL , 
     DESCRIPTION VARCHAR2 (200 BYTE)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE PRIVILEGE_TYPES 
    ADD CONSTRAINT PRIVILEGE_TYPES_PK PRIMARY KEY ( PRIVILEGE_CODE ) ;


CREATE TABLE PROBLEMS 
    ( 
     PROBLEM_ID NUMBER (10)  NOT NULL , 
     IS_KNOWN_ERROR CHAR (1 BYTE) DEFAULT 'f'  NOT NULL , 
     SUBJECT VARCHAR2 (100 BYTE)  NOT NULL , 
     DESCRIPTION VARCHAR2 (4000 BYTE)  NOT NULL , 
     CATEGORY_CODE CHAR (4 BYTE) , 
     CREATION_DATE DATE  NOT NULL , 
     CLOSURE_DATE DATE , 
     STATUS_CODE CHAR (4 BYTE) DEFAULT 'OPEN'  NOT NULL , 
     IMPACT_CODE CHAR (4 BYTE) , 
     URGENCY_CODE CHAR (4 BYTE) , 
     IMPACT_DETAILS VARCHAR2 (1000 BYTE) , 
     ROOT_CAUSE VARCHAR2 (1000 BYTE) , 
     SYMPTOMS VARCHAR2 (1000 BYTE) , 
     AUTHOR NUMBER (10)  NOT NULL , 
     PRIORITY_CODE CHAR (4 BYTE) , 
     STAFF_MEMBER NUMBER (10) , 
     GROUP_ID NUMBER (10) 
    ) LOGGING 
;



COMMENT ON TABLE PROBLEMS IS 'Tabela z problemami'
;

COMMENT ON COLUMN PROBLEMS.IS_KNOWN_ERROR IS 'Czy to znany b³¹d' 
;

COMMENT ON COLUMN PROBLEMS.SUBJECT IS 'Temat problemu' 
;

COMMENT ON COLUMN PROBLEMS.DESCRIPTION IS 'Opis problemu' 
;

COMMENT ON COLUMN PROBLEMS.AUTHOR IS 'Pracownik, która doda³a problem' 
;

COMMENT ON COLUMN PROBLEMS.STAFF_MEMBER IS 'Serwisant do którego jest przypisany problem' 
;

COMMENT ON COLUMN PROBLEMS.GROUP_ID IS 'Grupa wsparcia do której jest przypisany problem' 
;

ALTER TABLE PROBLEMS 
    ADD CONSTRAINT PROBLEMS_PK PRIMARY KEY ( PROBLEM_ID ) ;


CREATE TABLE REQUESTS 
    ( 
     REQUEST_ID NUMBER (10)  NOT NULL , 
     PRIORITY_CODE CHAR (4 BYTE) , 
     STATUS_CODE CHAR (4 BYTE) DEFAULT 'OPEN'  NOT NULL , 
     CREATION_DATE DATE , 
     AUTHOR NUMBER (10) , 
     CATEGORY_CODE CHAR (4 BYTE) , 
     EMPLOYEE_ID NUMBER (10) , 
     CLOSURE_DATE DATE , 
     TARGET_RESOLUTION_DATE DATE , 
     STAFF_MEMBER NUMBER (10) , 
     GROUP_ID NUMBER (10) 
    ) LOGGING 
;



COMMENT ON TABLE REQUESTS IS 'Tabela z zg³oszeniami'
;

ALTER TABLE REQUESTS 
    ADD CONSTRAINT REQUESTS_PK PRIMARY KEY ( REQUEST_ID ) ;


CREATE TABLE REQUEST_ATTRIBUTES 
    ( 
     ATTRIBUTE_ID NUMBER (10)  NOT NULL , 
     REQUEST_ID NUMBER (10) , 
     TYPE_CODE CHAR (6 BYTE) , 
     VALUE VARCHAR2 (1000 BYTE) 
    ) LOGGING 
;



COMMENT ON TABLE REQUEST_ATTRIBUTES IS 'Tabela z wartociami atrybutów dla zg³oszeñ.'
;

ALTER TABLE REQUEST_ATTRIBUTES 
    ADD CONSTRAINT REQUEST_ATTRIBUTES_PK PRIMARY KEY ( ATTRIBUTE_ID ) ;


CREATE TABLE REQUEST_ATTRIBUTE_TYPES 
    ( 
     TYPE_CODE CHAR (6 BYTE)  NOT NULL , 
     REQUIRED CHAR (1 BYTE)  NOT NULL , 
     CATEGORY_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE)  NOT NULL , 
     INPUT_TYPE VARCHAR2 (20 BYTE)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE REQUEST_ATTRIBUTE_TYPES 
    ADD CONSTRAINT REQ_ATTR_REQUIRED_CHK 
    CHECK ( REQUIRED IN ('t', 'f')) 
;


COMMENT ON TABLE REQUEST_ATTRIBUTE_TYPES IS 'Tabela z typami atrybutów dla danej kateogrii zg³oszenia. Przyk³adowo je¿eli kategoria zg³oszenia jest to instalacja oprogramowania to typami atrybutów mog¹ byæ nazwa aplikacji oraz wersja aplikacji.'
;

ALTER TABLE REQUEST_ATTRIBUTE_TYPES 
    ADD CONSTRAINT REQUEST_ATTRIBUTE_TYPES_PK PRIMARY KEY ( TYPE_CODE ) ;


CREATE TABLE RFC 
    ( 
     RFC_ID NUMBER (10)  NOT NULL , 
     VERSION NUMBER (10) , 
     CREATOR_ID NUMBER (10)  NOT NULL , 
     CREATIONTIME TIMESTAMP  NOT NULL , 
     STATE NUMBER (2)  NOT NULL , 
     TITLE VARCHAR2 (2000)  NOT NULL , 
     DESCRIPTION VARCHAR2 (4000)  NOT NULL , 
     "COMMENT" CLOB , 
     MANAGER_ID NUMBER (10) , 
     AUTHORITY_ID NUMBER (10) , 
     CAB_ID NUMBER (10) , 
     BUILDER_ID NUMBER (10) , 
     CATEGORY_ID NUMBER (10) , 
     IMPACT_ID NUMBER (10) , 
     PRIORITY_ID NUMBER (10) , 
     RESOLUTION_ID NUMBER (10) , 
     PIR CLOB 
    ) LOGGING 
;



ALTER TABLE RFC 
    ADD CONSTRAINT RFC_PK PRIMARY KEY ( RFC_ID ) ;


CREATE TABLE RFC_AUD 
    ( 
     RFC_ID NUMBER (10)  NOT NULL , 
     REV NUMBER (10)  NOT NULL , 
     REVTYPE NUMBER (3) , 
     STATE NUMBER (2) , 
     TITLE VARCHAR2 (2000) , 
     DESCRIPTION VARCHAR2 (4000) , 
     "COMMENT" CLOB , 
     MANAGER_ID NUMBER (10) , 
     AUTHORITY_ID NUMBER (10) , 
     CAB_ID NUMBER (10) , 
     BUILDER_ID NUMBER (10) , 
     CATEGORY_ID NUMBER (10) , 
     IMPACT_ID NUMBER (10) , 
     PRIORITY_ID NUMBER (10) , 
     RESOLUTION_ID NUMBER (10) , 
     PIR CLOB 
    ) LOGGING 
;



ALTER TABLE RFC_AUD 
    ADD CONSTRAINT RFC_AUD_PK PRIMARY KEY ( REV, RFC_ID ) ;


CREATE TABLE RFC_AUTHORITIES 
    ( 
     AUTHORITY_ID NUMBER (10)  NOT NULL , 
     NAME VARCHAR2 (400 BYTE)  NOT NULL , 
     IS_CAB CHAR (1 CHAR)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE RFC_AUTHORITIES 
    ADD CONSTRAINT RFC_AUTHORITIES_CK 
    CHECK (IS_CAB IN ('Y', 'N'))
        INITIALLY IMMEDIATE 
        ENABLE 
        VALIDATE 
;


ALTER TABLE RFC_AUTHORITIES 
    ADD CONSTRAINT RFC_AUTHORITIES_PK PRIMARY KEY ( AUTHORITY_ID ) ;

ALTER TABLE RFC_AUTHORITIES 
    ADD CONSTRAINT RFC_AUTHORITIES__UN UNIQUE ( NAME ) ;


CREATE TABLE RFC_AUTHORITY_CATEGORIES 
    ( 
     AUTHORITY_ID NUMBER (10)  NOT NULL , 
     CATEGORY_ID NUMBER (10)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE RFC_AUTHORITY_CATEGORIES 
    ADD CONSTRAINT TABLE_91_PK PRIMARY KEY ( AUTHORITY_ID, CATEGORY_ID ) ;


CREATE TABLE RFC_AUTHORITY_MEMBERS 
    ( 
     AUTHORITY_ID NUMBER (10)  NOT NULL , 
     EMPLOYEE_ID NUMBER (10)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE RFC_AUTHORITY_MEMBERS 
    ADD CONSTRAINT CAB_MEMBERS_PK PRIMARY KEY ( EMPLOYEE_ID, AUTHORITY_ID ) ;


CREATE TABLE RFC_CATEGORIES 
    ( 
     CATEGORY_ID NUMBER (10)  NOT NULL , 
     NAME VARCHAR2 (200)  NOT NULL , 
     ABSTRACT CHAR (1 BYTE)  NOT NULL , 
     PARENT_CATEGORY_ID NUMBER (10) 
    ) LOGGING 
;



ALTER TABLE RFC_CATEGORIES 
    ADD CONSTRAINT RFC_CATEGORY_CHK1 
    CHECK ( ABSTRACT IN ('Y', 'N')) 
;


ALTER TABLE RFC_CATEGORIES 
    ADD CONSTRAINT RFC_CATEGORY_PK PRIMARY KEY ( CATEGORY_ID ) ;

ALTER TABLE RFC_CATEGORIES 
    ADD CONSTRAINT RFC_CATEGORY_UK1 UNIQUE ( NAME ) ;


CREATE TABLE RFC_IMPACTS 
    ( 
     IMPACT_ID NUMBER (10)  NOT NULL , 
     NAME VARCHAR2 (200)  NOT NULL , 
     "ORDER" NUMBER (10)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE RFC_IMPACTS 
    ADD CONSTRAINT RFC_IMPACT_PK PRIMARY KEY ( IMPACT_ID ) ;

ALTER TABLE RFC_IMPACTS 
    ADD CONSTRAINT RFC_IMPACT_UK1 UNIQUE ( NAME ) ;


CREATE TABLE RFC_NOTIFICATIONS 
    ( 
     NOTIFICATION_ID NUMBER (10)  NOT NULL , 
     TYPE NUMBER (2)  NOT NULL , 
     RFC_ID NUMBER (10) 
    ) 
    CLUSTER NOTIFICATIONS_CLUSTER ( NOTIFICATION_ID ) 
;



ALTER TABLE RFC_NOTIFICATIONS 
    ADD CONSTRAINT RFC_NOTIFICATIONS_PK PRIMARY KEY ( NOTIFICATION_ID ) ;


CREATE TABLE RFC_PRIORITIES 
    ( 
     PRIORITY_ID NUMBER (10)  NOT NULL , 
     NAME VARCHAR2 (200)  NOT NULL , 
     URGENT CHAR (1 BYTE)  NOT NULL , 
     "ORDER" NUMBER (10)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE RFC_PRIORITIES 
    ADD CONSTRAINT RFC_PRIORITY_CHK1 
    CHECK ( URGENT IN ('Y', 'N')) 
;


ALTER TABLE RFC_PRIORITIES 
    ADD CONSTRAINT RFC_PRIORITY_PK PRIMARY KEY ( PRIORITY_ID ) ;

ALTER TABLE RFC_PRIORITIES 
    ADD CONSTRAINT RFC_PRIORITY_UK1 UNIQUE ( NAME ) ;


CREATE TABLE RFC_RESOLUTIONS 
    ( 
     RESOLUTION_ID NUMBER (10)  NOT NULL , 
     NAME VARCHAR2 (200)  NOT NULL , 
     "ORDER" NUMBER (10)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE RFC_RESOLUTIONS 
    ADD CONSTRAINT RFC_RESOLUTIONS_PK PRIMARY KEY ( RESOLUTION_ID ) ;

ALTER TABLE RFC_RESOLUTIONS 
    ADD CONSTRAINT RFC_RESOLUTIONS_UK1 UNIQUE ( NAME ) ;


CREATE TABLE ROLES 
    ( 
     ROLE_CODE VARCHAR2 (40 BYTE)  NOT NULL , 
     DESCRIPTION VARCHAR2 (200 BYTE)  NOT NULL 
    ) LOGGING 
;



COMMENT ON TABLE ROLES IS 'S³ownik z mo¿liwymi rolami dla u¿ytkowników aplikacji.'
;

ALTER TABLE ROLES 
    ADD CONSTRAINT ROLES_PK PRIMARY KEY ( ROLE_CODE ) ;


CREATE TABLE ROLE_PRIVILEGE 
    ( 
     ROLE_CODE VARCHAR2 (40 BYTE)  NOT NULL , 
     PRIVILEGE_CODE VARCHAR2 (40 BYTE)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE ROLE_PRIVILEGE 
    ADD CONSTRAINT ROLE_PRIVILEGE_PK PRIMARY KEY ( ROLE_CODE, PRIVILEGE_CODE ) ;


CREATE TABLE SERVICES 
    ( 
     SERVICE_ID NUMBER (10)  NOT NULL , 
     NAME VARCHAR2 (20)  NOT NULL , 
     DESCRIPTION VARCHAR2 (1000)  NOT NULL , 
     SERVICE_TYPE_CODE CHAR (4)  NOT NULL , 
     BUSINESS_IMPACT_CODE CHAR (4)  NOT NULL , 
     BUSINESS_PRIORITY_CODE CHAR (4)  NOT NULL , 
     AGREEMENT_ID NUMBER (10)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE SERVICES 
    ADD CONSTRAINT SERVICES_PK PRIMARY KEY ( SERVICE_ID ) ;


CREATE TABLE SERVICE_MANAGERS 
    ( 
     SERVICE_ID NUMBER (10)  NOT NULL , 
     EMPLOYEE_ID NUMBER (10)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE SERVICE_MANAGERS 
    ADD CONSTRAINT SERVICE_MANAGERS_PK PRIMARY KEY ( SERVICE_ID, EMPLOYEE_ID ) ;


CREATE TABLE SERVICE_TYPES 
    ( 
     SERVICE_TYPE_CODE CHAR (4)  NOT NULL , 
     NAME VARCHAR2 (20)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE SERVICE_TYPES 
    ADD CONSTRAINT SERVICE_TYPES_PK PRIMARY KEY ( SERVICE_TYPE_CODE ) ;


CREATE TABLE SIGNALS 
    ( 
     SIGNAL_ID NUMBER (10)  NOT NULL , 
     CREATION_DATE DATE  NOT NULL , 
     IS_SENT CHAR (1 BYTE) DEFAULT 'F'  NOT NULL , 
     EMPLOYEE_ID NUMBER (10)  NOT NULL , 
     TYPE_CODE NUMBER (10)  NOT NULL , 
     OBJECT_ID NUMBER (10)  NOT NULL , 
     ERROR_MESSAGE VARCHAR2 (1000) 
    ) LOGGING 
;



COMMENT ON TABLE SIGNALS IS 'Zawiera informacje o sygna³ach.'
;

COMMENT ON COLUMN SIGNALS.ERROR_MESSAGE IS 'Komunikat bledu w trakcie wysylania sygnalu' 
;

ALTER TABLE SIGNALS 
    ADD CONSTRAINT SIGNALS_PK PRIMARY KEY ( SIGNAL_ID ) ;


CREATE TABLE SIGNALS_TMP 
    ( 
     TYPE_CODE NUMBER (10)  NOT NULL , 
     EMPLOYEE_ID NUMBER (10) , 
     OBJECT_ID NUMBER (10) 
    ) LOGGING 
;



COMMENT ON TABLE SIGNALS_TMP IS 'Tabele tymczasowa przechowywuj¹ca dane o sygna³ach, które zostan¹ wygenerowany w zaistnieniu zdarzenia zmiany stanu. Trigger na poziomie wiersza wstawia dane do tej tabeli, natomiast trigger na poziomie tabeli pobiera wiersze z tej tabeli i wstawia do tabeli Signals.'
;


CREATE TABLE SIGNAL_ATTRIBUTES 
    ( 
     ATTRIBUTE_ID NUMBER (11)  NOT NULL , 
     SIGNAL_ID NUMBER (10)  NOT NULL , 
     ATTRIBUTE_CODE CHAR (4 BYTE)  NOT NULL , 
     ATTRIBUTE_VALUE VARCHAR2 (1000 BYTE) 
    ) LOGGING 
;



COMMENT ON TABLE SIGNAL_ATTRIBUTES IS 'Zawiera informacje o wartociach atrybutów sygna³ów.'
;

ALTER TABLE SIGNAL_ATTRIBUTES 
    ADD CONSTRAINT SIGNAL_PARAMS_PK PRIMARY KEY ( ATTRIBUTE_ID ) ;


CREATE TABLE SIGNAL_GENERATORS 
    ( 
     GENERATOR_ID NUMBER (8)  NOT NULL , 
     TYPE_CODE NUMBER (10)  NOT NULL , 
     CRITERION VARCHAR2 (1000 BYTE)  NOT NULL , 
     SELECT_STATEMENT VARCHAR2 (1000 BYTE)  NOT NULL , 
     RECEIVER_CODE CHAR (4 BYTE)  NOT NULL , 
     ENABLED CHAR (1 BYTE)  NOT NULL , 
     FREQUENCY NUMBER (3)  NOT NULL , 
     LAST_RUN_STATUS CHAR (1 BYTE) , 
     LAST_RUN_DATE DATE , 
     ERROR_MESSAGE VARCHAR2 (1000) 
    ) LOGGING 
;



ALTER TABLE SIGNAL_GENERATORS 
    ADD CONSTRAINT SIGNAL_GEN_ENABLED_CHK 
    CHECK ( ENABLED IN ('T', 'F')) 
;


ALTER TABLE SIGNAL_GENERATORS 
    ADD CONSTRAINT SIGNAL_GEN_STATUS_CHK 
    CHECK ( LAST_RUN_STATUS IN ('T', 'F')) 
;


COMMENT ON TABLE SIGNAL_GENERATORS IS 'Zawiera informacje o generatorach sygna³ów.'
;

COMMENT ON COLUMN SIGNAL_GENERATORS.TYPE_CODE IS 'Typ sygna³u' 
;

COMMENT ON COLUMN SIGNAL_GENERATORS.CRITERION IS 'Kryterium, które spe³niaj¹ obiekty' 
;

COMMENT ON COLUMN SIGNAL_GENERATORS.RECEIVER_CODE IS 'Typ odbiorcy' 
;

COMMENT ON COLUMN SIGNAL_GENERATORS.ENABLED IS 'Czy aktywny' 
;

COMMENT ON COLUMN SIGNAL_GENERATORS.FREQUENCY IS 'Czêstotliwoæ w minutach' 
;

COMMENT ON COLUMN SIGNAL_GENERATORS.LAST_RUN_STATUS IS 'Status ostatnio wykonanej generacji.' 
;

COMMENT ON COLUMN SIGNAL_GENERATORS.LAST_RUN_DATE IS 'Data ostatniej generacji' 
;

COMMENT ON COLUMN SIGNAL_GENERATORS.ERROR_MESSAGE IS 'Komunikat bledu w trakcie generacji sygnalow' 
;

ALTER TABLE SIGNAL_GENERATORS 
    ADD CONSTRAINT SIGNAL_GENERATORS_PK PRIMARY KEY ( GENERATOR_ID ) ;


CREATE TABLE SIGNAL_OBJECT_ATTRIBUTE_TYPES 
    ( 
     ATTRIBUTE_CODE CHAR (4 BYTE)  NOT NULL , 
     ATTRIBUTE_NAME VARCHAR2 (30 BYTE)  NOT NULL , 
     OBJECT_CODE CHAR (1 BYTE)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE SIGNAL_OBJECT_ATTRIBUTE_TYPES 
    ADD CONSTRAINT SIGNAL_PARAM_TYPES_PK PRIMARY KEY ( ATTRIBUTE_CODE ) ;


CREATE TABLE SIGNAL_OBJECT_TYPES 
    ( 
     OBJECT_CODE CHAR (1 BYTE)  NOT NULL , 
     VIEW_NAME VARCHAR2 (30 BYTE)  NOT NULL , 
     ID_COLUMN_NAME VARCHAR2 (30 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE)  NOT NULL , 
     DETAILS_URL VARCHAR2 (100 BYTE) 
    ) LOGGING 
;



COMMENT ON TABLE SIGNAL_OBJECT_TYPES IS 'Tabele zawieraj¹ce dane o typach obiektów. Przyk³adowe typy to: incydent, problem, zg³oszenie.'
;

ALTER TABLE SIGNAL_OBJECT_TYPES 
    ADD CONSTRAINT SIGNAL_OBJECT_TYPES_PK PRIMARY KEY ( OBJECT_CODE ) ;


CREATE TABLE SIGNAL_RECEIVER_TYPES 
    ( 
     RECEIVER_CODE CHAR (4 BYTE)  NOT NULL , 
     DESCRIPTION VARCHAR2 (200 BYTE)  NOT NULL , 
     FROM_STATEMENT VARCHAR2 (1000 BYTE)  NOT NULL 
    ) LOGGING 
;



COMMENT ON TABLE SIGNAL_RECEIVER_TYPES IS 'S³ownik mo¿liwych odbiorców sygna³ów.'
;

ALTER TABLE SIGNAL_RECEIVER_TYPES 
    ADD CONSTRAINT SIGNAL_RECEIVER_TYPES_PK PRIMARY KEY ( RECEIVER_CODE ) ;


CREATE TABLE SIGNAL_SIGNIFICANCE_TYPES 
    ( 
     SIGNIFICANCE_CODE CHAR (1 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE)  NOT NULL , 
     CSS_CLASS VARCHAR2 (100 BYTE) 
    ) LOGGING 
;



COMMENT ON TABLE SIGNAL_SIGNIFICANCE_TYPES IS 'S³ownik mo¿liwych rang sygna³ów. Przyk³adowe rangi: informacja, ostrze¿enie, b³¹d.'
;

ALTER TABLE SIGNAL_SIGNIFICANCE_TYPES 
    ADD CONSTRAINT SIGNAL_SIGNIFICANCE_TYPES_PK PRIMARY KEY ( SIGNIFICANCE_CODE ) ;


CREATE TABLE SIGNAL_TYPES 
    ( 
     TYPE_CODE NUMBER (10)  NOT NULL , 
     MSG_TEMPLATE VARCHAR2 (4000 BYTE)  NOT NULL , 
     SUBJECT_TEMPLATE VARCHAR2 (400 BYTE)  NOT NULL , 
     SIGNIFICANCE_CODE CHAR (1 BYTE)  NOT NULL , 
     OBJECT_CODE CHAR (1 BYTE)  NOT NULL , 
     NAME VARCHAR2 (1000 BYTE) 
    ) LOGGING 
;



COMMENT ON TABLE SIGNAL_TYPES IS 'Tabela zawieraj¹ca dane o typach sygna³ów.'
;

ALTER TABLE SIGNAL_TYPES 
    ADD CONSTRAINT SIGNAL_TYPES_PK PRIMARY KEY ( TYPE_CODE ) ;


CREATE TABLE SOLUTIONS 
    ( 
     SOLUTION_ID NUMBER (10)  NOT NULL , 
     PROBLEM_ID NUMBER (10)  NOT NULL , 
     SOLUTION_CODE CHAR (4 BYTE)  NOT NULL , 
     SUBJECT VARCHAR2 (100 BYTE)  NOT NULL , 
     DESCRIPTION VARCHAR2 (4000 BYTE)  NOT NULL , 
     CATEGORY_CODE CHAR (4 BYTE) , 
     CREATION_DATE DATE  NOT NULL , 
     AUTHOR NUMBER (10) , 
     LAST_UPDATE DATE 
    ) LOGGING 
;



COMMENT ON TABLE SOLUTIONS IS 'Tabela zawieraj¹ca rozwi¹zania problemów.  S¹ to zarówno rozwi¹zania tymczasowe oraz rozwi¹zania sta³e.'
;

ALTER TABLE SOLUTIONS 
    ADD CONSTRAINT PROBLEM_SOLUTIONS_PK PRIMARY KEY ( SOLUTION_ID ) ;


CREATE TABLE SOLUTION_CATEGORIES 
    ( 
     CATEGORY_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (30 BYTE) 
    ) LOGGING 
;



COMMENT ON TABLE SOLUTION_CATEGORIES IS 'S³ownik z typami kategorii rozwi¹zañ.'
;

ALTER TABLE SOLUTION_CATEGORIES 
    ADD CONSTRAINT SOLUTION_CATEGORIES_PK PRIMARY KEY ( CATEGORY_CODE ) ;


CREATE TABLE SOLUTION_TYPES 
    ( 
     SOLUTION_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE) 
    ) LOGGING 
;



COMMENT ON TABLE SOLUTION_TYPES IS 'S³ownik z typami rozwi¹zañ. Mo¿e to byæ rozwi¹zanie sta³e jak i tymczasowe.'
;

ALTER TABLE SOLUTION_TYPES 
    ADD CONSTRAINT SOLUTION_TYPES_PK PRIMARY KEY ( SOLUTION_CODE ) ;


CREATE TABLE SOURCE_TYPES_IM 
    ( 
     SOURCE_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE) 
    ) LOGGING 
;



ALTER TABLE SOURCE_TYPES_IM 
    ADD CONSTRAINT SOURCE_TYPES_IM_PK PRIMARY KEY ( SOURCE_CODE ) ;


CREATE TABLE STATUSES_IM 
    ( 
     STATUS_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (127 BYTE) 
    ) LOGGING 
;



COMMENT ON TABLE STATUSES_IM IS 'S³ownik z mo¿liowymi statusami dla incydentów.'
;

ALTER TABLE STATUSES_IM 
    ADD CONSTRAINT INCIDENTS_STATUSES_PK PRIMARY KEY ( STATUS_CODE ) ;


CREATE TABLE STATUSES_PM 
    ( 
     STATUS_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE) 
    ) LOGGING 
;



COMMENT ON TABLE STATUSES_PM IS 'S³ownik z typami statusów dla problemów.'
;

ALTER TABLE STATUSES_PM 
    ADD CONSTRAINT STATUSES_PM_PK PRIMARY KEY ( STATUS_CODE ) ;


CREATE TABLE STATUSES_RF 
    ( 
     STATUS_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE)  NOT NULL 
    ) LOGGING 
;



COMMENT ON TABLE STATUSES_RF IS 'S³ownik z mo¿liwymi typami statusów dla zg³oszeñ.'
;

ALTER TABLE STATUSES_RF 
    ADD CONSTRAINT STATUSES_RF_PK PRIMARY KEY ( STATUS_CODE ) ;


CREATE TABLE SUPPORTING_SERVICES 
    ( 
     SERVICE_ID NUMBER (10)  NOT NULL , 
     SUPPORTING_SERVICE_ID NUMBER (10)  NOT NULL 
    ) LOGGING 
;



ALTER TABLE SUPPORTING_SERVICES 
    ADD CONSTRAINT SUPPORTING_SERVICES_PK PRIMARY KEY ( SUPPORTING_SERVICE_ID, SERVICE_ID ) ;


CREATE TABLE SUPPORT_GROUPS 
    ( 
     GROUP_ID NUMBER (10)  NOT NULL , 
     NAME VARCHAR2 (30 BYTE) , 
     MANAGER_ID NUMBER (10) 
    ) LOGGING 
;



COMMENT ON TABLE SUPPORT_GROUPS IS 'Tabela z grupami wsparcia'
;

ALTER TABLE SUPPORT_GROUPS 
    ADD CONSTRAINT SUPPORT_GROUPS_PK PRIMARY KEY ( GROUP_ID ) ;


CREATE TABLE URGENCY_TYPES_IM 
    ( 
     URGENCY_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE) 
    ) LOGGING 
;



COMMENT ON TABLE URGENCY_TYPES_IM IS 'S³ownik z typami pilnoci dla incydentów.'
;

ALTER TABLE URGENCY_TYPES_IM 
    ADD CONSTRAINT URGENCY_TYPES_PK PRIMARY KEY ( URGENCY_CODE ) ;


CREATE TABLE URGENCY_TYPES_PM 
    ( 
     URGENCY_CODE CHAR (4 BYTE)  NOT NULL , 
     NAME VARCHAR2 (20 BYTE) 
    ) LOGGING 
;



COMMENT ON TABLE URGENCY_TYPES_PM IS 'S³ownik z typami pilnoci dla problemów.'
;

ALTER TABLE URGENCY_TYPES_PM 
    ADD CONSTRAINT URGENCY_TYPES_PM_PK PRIMARY KEY ( URGENCY_CODE ) ;


CREATE TABLE USERS 
    ( 
     USER_ID NUMBER (10)  NOT NULL , 
     LOGIN VARCHAR2 (50 CHAR)  NOT NULL , 
     PASSWORD VARCHAR2 (50 CHAR)  NOT NULL , 
     ENABLED CHAR (1 CHAR)  NOT NULL 
    ) 
    CLUSTER USERS_CLUSTER ( USER_ID ) 
;



ALTER TABLE USERS 
    ADD CONSTRAINT USERS_CHK1 
    CHECK ( ENABLED IN ('Y', 'N')) 
;


ALTER TABLE USERS 
    ADD CONSTRAINT USERS_PK PRIMARY KEY ( USER_ID ) ;

ALTER TABLE USERS 
    ADD CONSTRAINT USERS_UK2 UNIQUE ( LOGIN ) ;


CREATE TABLE USER_ROLE 
    ( 
     USER_ID NUMBER (10)  NOT NULL , 
     ROLE_CODE VARCHAR2 (40 BYTE)  NOT NULL 
    ) LOGGING 
;



COMMENT ON TABLE USER_ROLE IS 'Tabela asocjacyjna zawieraj¹ca role przypisane dla danego pracownika'
;



ALTER TABLE ANNOUNCEMENTS 
    ADD CONSTRAINT ANNOUNCEMENTS_EMPLOYEES_FK1 FOREIGN KEY 
    ( 
     AUTHOR
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE ANNOUNCEMENT_ATTACHMENTS 
    ADD CONSTRAINT ANNOUNCEMENT_ATTACHMENTS__FK1 FOREIGN KEY 
    ( 
     ANNOUNCEMENT_ID
    ) 
    REFERENCES ANNOUNCEMENTS 
    ( 
     ANNOUNCEMENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE ANNOUNCEMENT_ATTACHMENTS 
    ADD CONSTRAINT ANNOUNCEMENT_ATTACHMENTS__FK2 FOREIGN KEY 
    ( 
     ATTACHMENT_ID
    ) 
    REFERENCES ATTACHMENTS 
    ( 
     ATTACHMENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE AUDITREVISION 
    ADD CONSTRAINT AUDITREVISION_EMPLOYEES_FK1 FOREIGN KEY 
    ( 
     USER_ID
    ) 
    REFERENCES USERS 
    ( 
     USER_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE RFC_AUTHORITY_CATEGORIES 
    ADD CONSTRAINT AUTHORITY_CATEGORIES2_FK FOREIGN KEY 
    ( 
     CATEGORY_ID
    ) 
    REFERENCES RFC_CATEGORIES 
    ( 
     CATEGORY_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_CLASS_ATTRIBUTES 
    ADD CONSTRAINT C2_CLASS_ATTRIBUTES_C2_CL_FK1 FOREIGN KEY 
    ( 
     CLASS_ID
    ) 
    REFERENCES C2_CLASSES 
    ( 
     CLASS_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_CLASS_ATTRIBUTE_VALUES 
    ADD CONSTRAINT C2_CLASS_ATTRIBUTE_VALUES_FK1 FOREIGN KEY 
    ( 
     ENTITY_ID
    ) 
    REFERENCES C2_ENTITIES 
    ( 
     ENTITY_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_CLASS_ATTRIBUTE_VALUES 
    ADD CONSTRAINT C2_CLASS_ATTRIBUTE_VALUES_FK2 FOREIGN KEY 
    ( 
     ATTRIBITE_ID
    ) 
    REFERENCES C2_CLASS_ATTRIBUTES 
    ( 
     ATTRIBUTE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_ITEMS_EMPLOYEE 
    ADD CONSTRAINT C2_EMPLOYEE_ITEMS_C2_ITEM_FK1 FOREIGN KEY 
    ( 
     ITEM_ID
    ) 
    REFERENCES C2_ITEMS 
    ( 
     ITEM_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_ITEMS_EMPLOYEE 
    ADD CONSTRAINT C2_EMPLOYEE_ITEMS_EMPLOYE_FK1 FOREIGN KEY 
    ( 
     EMPLOYEE_ID
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_ITEMS_INCIDENT 
    ADD CONSTRAINT C2_INCIDENT_ITEMS_C2_ITEM_FK1 FOREIGN KEY 
    ( 
     ITEM_ID
    ) 
    REFERENCES C2_ITEMS 
    ( 
     ITEM_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_ITEMS_INCIDENT 
    ADD CONSTRAINT C2_INCIDENT_ITEMS_INCIDEN_FK1 FOREIGN KEY 
    ( 
     INCIDENT_ID
    ) 
    REFERENCES INCIDENTS 
    ( 
     INCIDENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_ITEMS 
    ADD CONSTRAINT C2_ITEMS_C2_ENTITIES_FK1 FOREIGN KEY 
    ( 
     ITEM_ID
    ) 
    REFERENCES C2_ENTITIES 
    ( 
     ENTITY_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_ITEM_CLASSES 
    ADD CONSTRAINT C2_ITEM_CLASSES_C2_ITEM_C_FK1 FOREIGN KEY 
    ( 
     PARENT_CLASS_ID
    ) 
    REFERENCES C2_ITEM_CLASSES 
    ( 
     CLASS_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_ITEM_CLASSES 
    ADD CONSTRAINT C2_ITEM_CLASS_C2_CLASS_FK1 FOREIGN KEY 
    ( 
     CLASS_ID
    ) 
    REFERENCES C2_CLASSES 
    ( 
     CLASS_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_ITEMS_PROBLEM 
    ADD CONSTRAINT C2_PROBLEM_ITEMS_C2_ITEMS_FK1 FOREIGN KEY 
    ( 
     ITEM_ID
    ) 
    REFERENCES C2_ITEMS 
    ( 
     ITEM_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_ITEMS_PROBLEM 
    ADD CONSTRAINT C2_PROBLEM_ITEMS_INCIDENT_FK1 FOREIGN KEY 
    ( 
     PROBLEM_ID
    ) 
    REFERENCES PROBLEMS 
    ( 
     PROBLEM_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_RELATIONS 
    ADD CONSTRAINT C2_RELATIONS_C2_ENTITIES_FK1 FOREIGN KEY 
    ( 
     RELATION_ID
    ) 
    REFERENCES C2_ENTITIES 
    ( 
     ENTITY_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_RELATIONS 
    ADD CONSTRAINT C2_RELATIONS_C2_ITEMS_FK1 FOREIGN KEY 
    ( 
     SOURCE_ITEM_ID
    ) 
    REFERENCES C2_ITEMS 
    ( 
     ITEM_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_RELATIONS 
    ADD CONSTRAINT C2_RELATIONS_C2_ITEMS_FK2 FOREIGN KEY 
    ( 
     TARGET_ITEM_ID
    ) 
    REFERENCES C2_ITEMS 
    ( 
     ITEM_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_RELATIONS 
    ADD CONSTRAINT C2_RELATIONS_C2_RELATION__FK1 FOREIGN KEY 
    ( 
     RELATION_CLASS_ID
    ) 
    REFERENCES C2_RELATION_CLASSES 
    ( 
     CLASS_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_RELATION_CLASSES 
    ADD CONSTRAINT C2_RELATION_CLASSES_C2_RE_FK1 FOREIGN KEY 
    ( 
     PARENT_CLASS_ID
    ) 
    REFERENCES C2_RELATION_CLASSES 
    ( 
     CLASS_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_RELATION_CLASSES 
    ADD CONSTRAINT C2_RELATION_CLASS_C2_CLAS_FK1 FOREIGN KEY 
    ( 
     CLASS_ID
    ) 
    REFERENCES C2_CLASSES 
    ( 
     CLASS_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_RELATION_CLASSES 
    ADD CONSTRAINT C2_RELATION_CLASS_C2_ITEM_FK1 FOREIGN KEY 
    ( 
     SOURCE_CLASS_ID
    ) 
    REFERENCES C2_ITEM_CLASSES 
    ( 
     CLASS_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_RELATION_CLASSES 
    ADD CONSTRAINT C2_RELATION_CLASS_C2_ITEM_FK2 FOREIGN KEY 
    ( 
     TARGET_CLASS_ID
    ) 
    REFERENCES C2_ITEM_CLASSES 
    ( 
     CLASS_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_ITEMS_RFC 
    ADD CONSTRAINT C2_RFC_ITEMS_C2_ITEMS_FK1 FOREIGN KEY 
    ( 
     ITEM_ID
    ) 
    REFERENCES C2_ITEMS 
    ( 
     ITEM_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_ITEMS_SERVICE 
    ADD CONSTRAINT C2_SERVICE_ITEMS_C2_ITEMS_FK1 FOREIGN KEY 
    ( 
     ITEM_ID
    ) 
    REFERENCES C2_ITEMS 
    ( 
     ITEM_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_ITEMS_SERVICE 
    ADD CONSTRAINT C2_SERVICE_ITEMS_SERVICES_FK1 FOREIGN KEY 
    ( 
     SERVICE_ID
    ) 
    REFERENCES SERVICES 
    ( 
     SERVICE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_ITEMS_UNIVERSAL 
    ADD CONSTRAINT C2_UNIVERSAL_ITEMS_C2_CLA_FK1 FOREIGN KEY 
    ( 
     CLASS_ID
    ) 
    REFERENCES C2_ITEM_CLASSES 
    ( 
     CLASS_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE C2_ITEMS_UNIVERSAL 
    ADD CONSTRAINT C2_UNIVERSAL_ITEMS_C2_ITE_FK1 FOREIGN KEY 
    ( 
     ITEM_ID
    ) 
    REFERENCES C2_ITEMS 
    ( 
     ITEM_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE RFC_AUTHORITY_MEMBERS 
    ADD CONSTRAINT CAB_MEMBERS_EMPLOYEES_FK1 FOREIGN KEY 
    ( 
     EMPLOYEE_ID
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE CATEGORIES_PM 
    ADD CONSTRAINT CATEGORIES_PM_CATEGORIES__FK1 FOREIGN KEY 
    ( 
     CATEGORY_CODE
    ) 
    REFERENCES CATEGORIES_PM 
    ( 
     CATEGORY_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE CATEGORIES_RF 
    ADD CONSTRAINT CATEGORIES_RF_CATEGORIES__FK1 FOREIGN KEY 
    ( 
     PARENT_CATEGORY
    ) 
    REFERENCES CATEGORIES_RF 
    ( 
     CATEGORY_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE CLIENT_USERS 
    ADD CONSTRAINT CLIENT_USERS_CLIENTS_FK1 FOREIGN KEY 
    ( 
     CLIENT_ID
    ) 
    REFERENCES CLIENTS 
    ( 
     CLIENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE CLIENT_USERS 
    ADD CONSTRAINT CLIENT_USERS_USERS_FK1 FOREIGN KEY 
    ( 
     USER_ID
    ) 
    REFERENCES USERS 
    ( 
     USER_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE COMMENTS 
    ADD CONSTRAINT COMMENTS_EMPLOYEES_FK FOREIGN KEY 
    ( 
     EMPLOYEE_ID
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE COMMENTS 
    ADD CONSTRAINT COMMENTS_INCIDENTS_FK FOREIGN KEY 
    ( 
     INCIDENT_ID
    ) 
    REFERENCES INCIDENTS 
    ( 
     INCIDENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE COMMENTS 
    ADD CONSTRAINT COMMENTS_PROBLEMS_FK FOREIGN KEY 
    ( 
     PROBLEM_ID
    ) 
    REFERENCES PROBLEMS 
    ( 
     PROBLEM_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE COMMENTS 
    ADD CONSTRAINT COMMENTS_REQUESTS_FK FOREIGN KEY 
    ( 
     REQUEST_ID
    ) 
    REFERENCES REQUESTS 
    ( 
     REQUEST_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE COOPERANTS 
    ADD CONSTRAINT COOPERANTS_ORGANIZATIONS_FK1 FOREIGN KEY 
    ( 
     ORGANIZATION_ID
    ) 
    REFERENCES ORGANIZATIONS 
    ( 
     ORGANIZATION_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE COOPERANT_USERS 
    ADD CONSTRAINT COOPERANT_USERS_COOPERANT_FK1 FOREIGN KEY 
    ( 
     COOPERANT_ID
    ) 
    REFERENCES COOPERANTS 
    ( 
     COOPERANT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE COOPERANT_USERS 
    ADD CONSTRAINT COOPERANT_USERS_USERS_FK1 FOREIGN KEY 
    ( 
     USER_ID
    ) 
    REFERENCES USERS 
    ( 
     USER_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE DEPARTMENTS 
    ADD CONSTRAINT DEPARTMENTS_EMPLOYEES_FK FOREIGN KEY 
    ( 
     MANAGER_ID
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE EMPLOYEES 
    ADD CONSTRAINT EMPLOYEES_DEPARTMENTS_FK FOREIGN KEY 
    ( 
     DEPARTMENT_ID
    ) 
    REFERENCES DEPARTMENTS 
    ( 
     DEPARTMENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE EMPLOYEES 
    ADD CONSTRAINT EMPLOYEES_EMPLOYEES_FK FOREIGN KEY 
    ( 
     MANAGER_ID
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE EMPLOYEES 
    ADD CONSTRAINT EMPLOYEES_JOBS_FK FOREIGN KEY 
    ( 
     JOB_CODE
    ) 
    REFERENCES JOBS 
    ( 
     JOB_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE USER_ROLE 
    ADD CONSTRAINT EMPLOYEE_ROLE_EMPLOYEES_FK FOREIGN KEY 
    ( 
     USER_ID
    ) 
    REFERENCES USERS 
    ( 
     USER_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE USER_ROLE 
    ADD CONSTRAINT EMPLOYEE_ROLE_ROLES_FK1 FOREIGN KEY 
    ( 
     ROLE_CODE
    ) 
    REFERENCES ROLES 
    ( 
     ROLE_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE EMPLOYEE_SERVICE 
    ADD CONSTRAINT EMPLOYEE_SERVICE_AGREEMEN_FK1 FOREIGN KEY 
    ( 
     AGREEMENT_ID
    ) 
    REFERENCES AGREEMENTS 
    ( 
     AGREEMENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE EMPLOYEE_SERVICE 
    ADD CONSTRAINT EMPLOYEE_SERVICE_EMPLOYEE_FK1 FOREIGN KEY 
    ( 
     EMPLOYEE_ID
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE EMPLOYEE_SERVICE 
    ADD CONSTRAINT EMPLOYEE_SERVICE_SERVICES_FK FOREIGN KEY 
    ( 
     SERVICE_ID
    ) 
    REFERENCES SERVICES 
    ( 
     SERVICE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE EMPLOYEE_USERS 
    ADD CONSTRAINT EMPLOYEE_USERS_EMPLOYEES_FK1 FOREIGN KEY 
    ( 
     EMPLOYEE_ID
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE EMPLOYEE_USERS 
    ADD CONSTRAINT EMPLOYEE_USERS_USERS_FK1 FOREIGN KEY 
    ( 
     USER_ID
    ) 
    REFERENCES USERS 
    ( 
     USER_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE EVENTS 
    ADD CONSTRAINT EVENTS_EVENT_CATEGORIES_FK FOREIGN KEY 
    ( 
     CATEGORY_CODE
    ) 
    REFERENCES CATEGORIES_EM 
    ( 
     CATEGORY_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE EVENTS 
    ADD CONSTRAINT EVENTS_EVENT_SIGNIFICANCE_FK1 FOREIGN KEY 
    ( 
     SIGNIFICANCE_CODE
    ) 
    REFERENCES EVENT_SIGNIFICANCE_TYPES 
    ( 
     SIGNIFICANCE_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE EVENTS 
    ADD CONSTRAINT EVENTS_INCIDENTS_FK FOREIGN KEY 
    ( 
     INCIDENT_ID
    ) 
    REFERENCES INCIDENTS 
    ( 
     INCIDENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE CATEGORIES_EM 
    ADD CONSTRAINT EVENT_CATEGORIES_EVENT_CA_FK1 FOREIGN KEY 
    ( 
     PARENT_CATEGORY
    ) 
    REFERENCES CATEGORIES_EM 
    ( 
     CATEGORY_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE EVENT_INCIDENT 
    ADD CONSTRAINT EVENT_INCIDENT_EVENTS_FK FOREIGN KEY 
    ( 
     EVENT_ID
    ) 
    REFERENCES EVENTS 
    ( 
     EVENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE EVENT_INCIDENT 
    ADD CONSTRAINT EVENT_INCIDENT_INCIDENTS_FK FOREIGN KEY 
    ( 
     INCIDENT_ID
    ) 
    REFERENCES INCIDENTS 
    ( 
     INCIDENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE EVENT_PARAMETERS 
    ADD CONSTRAINT EVENT_PARAMETERS_EVENTS_FK FOREIGN KEY 
    ( 
     EVENT_ID
    ) 
    REFERENCES EVENTS 
    ( 
     EVENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE GROUP_MEMBER 
    ADD CONSTRAINT GROUP_MEMBER_EMPLOYEES_FK FOREIGN KEY 
    ( 
     EMPLOYEE_ID
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE GROUP_MEMBER 
    ADD CONSTRAINT GROUP_MEMBER_SUPPORT_GROU_FK1 FOREIGN KEY 
    ( 
     GROUP_ID
    ) 
    REFERENCES SUPPORT_GROUPS 
    ( 
     GROUP_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE IMPACT_URGENCY_IM 
    ADD CONSTRAINT IMPACT_URGENCY_IMPACT_TYP_FK1 FOREIGN KEY 
    ( 
     IMPACT_CODE
    ) 
    REFERENCES IMPACT_TYPES_IM 
    ( 
     IMPACT_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE IMPACT_URGENCY_IM 
    ADD CONSTRAINT IMPACT_URGENCY_PRIORITY_T_FK1 FOREIGN KEY 
    ( 
     PRIORITY_CODE
    ) 
    REFERENCES PRIORITY_TYPES_IM 
    ( 
     PRIORITY_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE IMPACT_URGENCY_IM 
    ADD CONSTRAINT IMPACT_URGENCY_URGENCY_TY_FK1 FOREIGN KEY 
    ( 
     URGENCY_CODE
    ) 
    REFERENCES URGENCY_TYPES_IM 
    ( 
     URGENCY_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE INCIDENTS 
    ADD CONSTRAINT INCIDENTS_EMPLOYEES_FK FOREIGN KEY 
    ( 
     AUTHOR
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE INCIDENTS 
    ADD CONSTRAINT INCIDENTS_EMPLOYEES_FK1 FOREIGN KEY 
    ( 
     STAFF_MEMBER
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE INCIDENTS 
    ADD CONSTRAINT INCIDENTS_EMPLOYEES_FK2 FOREIGN KEY 
    ( 
     LAST_EDIT_BY
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE INCIDENTS_HISTORY 
    ADD CONSTRAINT INCIDENTS_HISTORY_INCIDEN_FK1 FOREIGN KEY 
    ( 
     INCIDENT_ID
    ) 
    REFERENCES INCIDENTS 
    ( 
     INCIDENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE INCIDENTS 
    ADD CONSTRAINT INCIDENTS_IMPACT_TYPES_FK FOREIGN KEY 
    ( 
     IMPACT_CODE
    ) 
    REFERENCES IMPACT_TYPES_IM 
    ( 
     IMPACT_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE INCIDENTS 
    ADD CONSTRAINT INCIDENTS_INCIDENT_CATEGO_FK1 FOREIGN KEY 
    ( 
     CATEGORY_CODE
    ) 
    REFERENCES CATEGORIES_IM 
    ( 
     CATEGORY_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE INCIDENTS 
    ADD CONSTRAINT INCIDENTS_PRIORITY_TYPES_FK FOREIGN KEY 
    ( 
     PRIORITY_CODE
    ) 
    REFERENCES PRIORITY_TYPES_IM 
    ( 
     PRIORITY_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE INCIDENTS 
    ADD CONSTRAINT INCIDENTS_SERVICES_FK FOREIGN KEY 
    ( 
     SERVICE_ID
    ) 
    REFERENCES SERVICES 
    ( 
     SERVICE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE INCIDENTS 
    ADD CONSTRAINT INCIDENTS_SOURCE_TYPES_IM_FK FOREIGN KEY 
    ( 
     SOURCE_CODE
    ) 
    REFERENCES SOURCE_TYPES_IM 
    ( 
     SOURCE_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE INCIDENTS 
    ADD CONSTRAINT INCIDENTS_STATUSES_IM_FK FOREIGN KEY 
    ( 
     STATUS_CODE
    ) 
    REFERENCES STATUSES_IM 
    ( 
     STATUS_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE INCIDENTS 
    ADD CONSTRAINT INCIDENTS_SUPPORT_GROUPS_FK FOREIGN KEY 
    ( 
     GROUP_ID
    ) 
    REFERENCES SUPPORT_GROUPS 
    ( 
     GROUP_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE INCIDENTS 
    ADD CONSTRAINT INCIDENTS_URGENCY_TYPES_FK FOREIGN KEY 
    ( 
     URGENCY_CODE
    ) 
    REFERENCES URGENCY_TYPES_IM 
    ( 
     URGENCY_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE CATEGORIES_IM 
    ADD CONSTRAINT INCIDENT_CATEGORY_INCIDEN_FK1 FOREIGN KEY 
    ( 
     PARENT_CATEGORY
    ) 
    REFERENCES CATEGORIES_IM 
    ( 
     CATEGORY_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE INCIDENT_PROBLEM 
    ADD CONSTRAINT INCIDENT_PROBLEM_INCIDENT_FK1 FOREIGN KEY 
    ( 
     INCIDENT_ID
    ) 
    REFERENCES INCIDENTS 
    ( 
     INCIDENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE INCIDENT_PROBLEM 
    ADD CONSTRAINT INCIDENT_PROBLEM_PROBLEMS_FK FOREIGN KEY 
    ( 
     PROBLEM_ID
    ) 
    REFERENCES PROBLEMS 
    ( 
     PROBLEM_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE NOTIFICATIONS 
    ADD CONSTRAINT MESSAGES_USERS_FK FOREIGN KEY 
    ( 
     USER_ID
    ) 
    REFERENCES USERS 
    ( 
     USER_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE NOTIFICATIONS 
    ADD CONSTRAINT NOTIFICATIONS_USERS_FK FOREIGN KEY 
    ( 
     INSTIGATOR_ID
    ) 
    REFERENCES USERS 
    ( 
     USER_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE PROBLEMS 
    ADD CONSTRAINT PROBLEMS_CATEGORIES_PM_FK FOREIGN KEY 
    ( 
     CATEGORY_CODE
    ) 
    REFERENCES CATEGORIES_PM 
    ( 
     CATEGORY_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE PROBLEMS 
    ADD CONSTRAINT PROBLEMS_EMPLOYEES_FK FOREIGN KEY 
    ( 
     AUTHOR
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE PROBLEMS 
    ADD CONSTRAINT PROBLEMS_EMPLOYEES_FK1 FOREIGN KEY 
    ( 
     STAFF_MEMBER
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE PROBLEMS 
    ADD CONSTRAINT PROBLEMS_IMPACT_TYPES_PM_FK FOREIGN KEY 
    ( 
     IMPACT_CODE
    ) 
    REFERENCES IMPACT_TYPES_PM 
    ( 
     IMPACT_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE PROBLEMS 
    ADD CONSTRAINT PROBLEMS_PRIORITY_TYPES_P_FK1 FOREIGN KEY 
    ( 
     PRIORITY_CODE
    ) 
    REFERENCES PRIORITY_TYPES_PM 
    ( 
     PRIORITY_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE PROBLEMS 
    ADD CONSTRAINT PROBLEMS_STATUSES_PM_FK FOREIGN KEY 
    ( 
     STATUS_CODE
    ) 
    REFERENCES STATUSES_PM 
    ( 
     STATUS_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE PROBLEMS 
    ADD CONSTRAINT PROBLEMS_SUPPORT_GROUPS_FK FOREIGN KEY 
    ( 
     GROUP_ID
    ) 
    REFERENCES SUPPORT_GROUPS 
    ( 
     GROUP_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE PROBLEMS 
    ADD CONSTRAINT PROBLEMS_URGENCY_TYPES_PM_FK FOREIGN KEY 
    ( 
     URGENCY_CODE
    ) 
    REFERENCES URGENCY_TYPES_PM 
    ( 
     URGENCY_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE SOLUTIONS 
    ADD CONSTRAINT PROBLEM_SOLUTIONS_PROBLEM_FK1 FOREIGN KEY 
    ( 
     PROBLEM_ID
    ) 
    REFERENCES PROBLEMS 
    ( 
     PROBLEM_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE SOLUTIONS 
    ADD CONSTRAINT PROBLEM_SOLUTIONS_SOLUTIO_FK1 FOREIGN KEY 
    ( 
     CATEGORY_CODE
    ) 
    REFERENCES SOLUTION_CATEGORIES 
    ( 
     CATEGORY_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE REQUESTS 
    ADD CONSTRAINT REQUESTS_CATEGORIES_RF_FK FOREIGN KEY 
    ( 
     CATEGORY_CODE
    ) 
    REFERENCES CATEGORIES_RF 
    ( 
     CATEGORY_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE REQUESTS 
    ADD CONSTRAINT REQUESTS_EMPLOYEES_FK FOREIGN KEY 
    ( 
     EMPLOYEE_ID
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE REQUESTS 
    ADD CONSTRAINT REQUESTS_EMPLOYEES_FK1 FOREIGN KEY 
    ( 
     STAFF_MEMBER
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE REQUESTS 
    ADD CONSTRAINT REQUESTS_PRIORITY_TYPES_R_FK1 FOREIGN KEY 
    ( 
     PRIORITY_CODE
    ) 
    REFERENCES PRIORITY_TYPES_RF 
    ( 
     PRIORITY_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE REQUESTS 
    ADD CONSTRAINT REQUESTS_STATUSES_RF_FK FOREIGN KEY 
    ( 
     STATUS_CODE
    ) 
    REFERENCES STATUSES_RF 
    ( 
     STATUS_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE REQUESTS 
    ADD CONSTRAINT REQUESTS_SUPPORT_GROUPS_FK FOREIGN KEY 
    ( 
     GROUP_ID
    ) 
    REFERENCES SUPPORT_GROUPS 
    ( 
     GROUP_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE REQUEST_ATTRIBUTES 
    ADD CONSTRAINT REQUEST_ATTRIBUTES_REQUES_FK1 FOREIGN KEY 
    ( 
     TYPE_CODE
    ) 
    REFERENCES REQUEST_ATTRIBUTE_TYPES 
    ( 
     TYPE_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE REQUEST_ATTRIBUTE_TYPES 
    ADD CONSTRAINT REQUEST_ATTRIBUTE_TYPES_C_FK1 FOREIGN KEY 
    ( 
     CATEGORY_CODE
    ) 
    REFERENCES CATEGORIES_RF 
    ( 
     CATEGORY_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE REQUEST_ATTRIBUTES 
    ADD CONSTRAINT REQ_ATT_REQ_FK FOREIGN KEY 
    ( 
     REQUEST_ID
    ) 
    REFERENCES REQUESTS 
    ( 
     REQUEST_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE RFC_AUTHORITY_CATEGORIES 
    ADD CONSTRAINT RFC_AUTHORITY_CATEGO_FK FOREIGN KEY 
    ( 
     AUTHORITY_ID
    ) 
    REFERENCES RFC_AUTHORITIES 
    ( 
     AUTHORITY_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE RFC_AUTHORITY_MEMBERS 
    ADD CONSTRAINT RFC_AUTHORITY_MEMBE_FK FOREIGN KEY 
    ( 
     AUTHORITY_ID
    ) 
    REFERENCES RFC_AUTHORITIES 
    ( 
     AUTHORITY_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE RFC 
    ADD CONSTRAINT RFC_BUILDER_FK FOREIGN KEY 
    ( 
     BUILDER_ID
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE RFC_CATEGORIES 
    ADD CONSTRAINT RFC_CATEGORY_RFC_CATEGORY_FK1 FOREIGN KEY 
    ( 
     PARENT_CATEGORY_ID
    ) 
    REFERENCES RFC_CATEGORIES 
    ( 
     CATEGORY_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE RFC 
    ADD CONSTRAINT RFC_EMPLOYEES_FK1 FOREIGN KEY 
    ( 
     CREATOR_ID
    ) 
    REFERENCES USERS 
    ( 
     USER_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE RFC 
    ADD CONSTRAINT RFC_EMPLOYEES_FK2 FOREIGN KEY 
    ( 
     MANAGER_ID
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE RFC_NOTIFICATIONS 
    ADD CONSTRAINT RFC_NOTIFICATIONS_NOT_FK FOREIGN KEY 
    ( 
     NOTIFICATION_ID
    ) 
    REFERENCES NOTIFICATIONS 
    ( 
     NOTIFICATION_ID
    ) 
    ON DELETE CASCADE 
    NOT DEFERRABLE 
;


ALTER TABLE RFC_NOTIFICATIONS 
    ADD CONSTRAINT RFC_NOTIFICATIONS_RFC_FK FOREIGN KEY 
    ( 
     RFC_ID
    ) 
    REFERENCES RFC 
    ( 
     RFC_ID
    ) 
    ON DELETE CASCADE 
    NOT DEFERRABLE 
;


ALTER TABLE RFC 
    ADD CONSTRAINT RFC_RFC_CATEGORY_FK1 FOREIGN KEY 
    ( 
     CATEGORY_ID
    ) 
    REFERENCES RFC_CATEGORIES 
    ( 
     CATEGORY_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE RFC 
    ADD CONSTRAINT RFC_RFC_IMPACT_FK1 FOREIGN KEY 
    ( 
     IMPACT_ID
    ) 
    REFERENCES RFC_IMPACTS 
    ( 
     IMPACT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE RFC 
    ADD CONSTRAINT RFC_RFC_PRIORITY_FK1 FOREIGN KEY 
    ( 
     PRIORITY_ID
    ) 
    REFERENCES RFC_PRIORITIES 
    ( 
     PRIORITY_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE RFC 
    ADD CONSTRAINT RFC_RFC_RESOLUTIONS_FK1 FOREIGN KEY 
    ( 
     RESOLUTION_ID
    ) 
    REFERENCES RFC_RESOLUTIONS 
    ( 
     RESOLUTION_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE ROLE_PRIVILEGE 
    ADD CONSTRAINT ROLE_PRIVILEGE_PRIVILEGE__FK1 FOREIGN KEY 
    ( 
     PRIVILEGE_CODE
    ) 
    REFERENCES PRIVILEGE_TYPES 
    ( 
     PRIVILEGE_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE ROLE_PRIVILEGE 
    ADD CONSTRAINT ROLE_PRIVILEGE_ROLES_FK1 FOREIGN KEY 
    ( 
     ROLE_CODE
    ) 
    REFERENCES ROLES 
    ( 
     ROLE_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE SERVICES 
    ADD CONSTRAINT SERVICES_SERVICE_TYPES_FK FOREIGN KEY 
    ( 
     SERVICE_TYPE_CODE
    ) 
    REFERENCES SERVICE_TYPES 
    ( 
     SERVICE_TYPE_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE SERVICES 
    ADD CONSTRAINT SERVICES_SLA_FK FOREIGN KEY 
    ( 
     AGREEMENT_ID
    ) 
    REFERENCES AGREEMENTS 
    ( 
     AGREEMENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE SERVICE_MANAGERS 
    ADD CONSTRAINT SERVICE_MANAGERS_EMPLOYEE_FK1 FOREIGN KEY 
    ( 
     EMPLOYEE_ID
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE SERVICE_MANAGERS 
    ADD CONSTRAINT SERVICE_MANAGERS_SERVICES_FK FOREIGN KEY 
    ( 
     SERVICE_ID
    ) 
    REFERENCES SERVICES 
    ( 
     SERVICE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE SIGNAL_ATTRIBUTES 
    ADD CONSTRAINT SIGNAL_ATTRIBUTES_SIGNAL__FK1 FOREIGN KEY 
    ( 
     ATTRIBUTE_CODE
    ) 
    REFERENCES SIGNAL_OBJECT_ATTRIBUTE_TYPES 
    ( 
     ATTRIBUTE_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE SIGNAL_GENERATORS 
    ADD CONSTRAINT SIGNAL_GENERATORS_RECEIVER_FK FOREIGN KEY 
    ( 
     RECEIVER_CODE
    ) 
    REFERENCES SIGNAL_RECEIVER_TYPES 
    ( 
     RECEIVER_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE SIGNAL_GENERATORS 
    ADD CONSTRAINT SIGNAL_GENERATORS_SIGNAL_FK FOREIGN KEY 
    ( 
     TYPE_CODE
    ) 
    REFERENCES SIGNAL_TYPES 
    ( 
     TYPE_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE SIGNAL_OBJECT_ATTRIBUTE_TYPES 
    ADD CONSTRAINT SIGNAL_OBJECT_ATTRIBUTE_TYP_FK FOREIGN KEY 
    ( 
     OBJECT_CODE
    ) 
    REFERENCES SIGNAL_OBJECT_TYPES 
    ( 
     OBJECT_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE SIGNAL_ATTRIBUTES 
    ADD CONSTRAINT SIGNAL_PARAMS_SIGNALS_FK FOREIGN KEY 
    ( 
     SIGNAL_ID
    ) 
    REFERENCES SIGNALS 
    ( 
     SIGNAL_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE SIGNAL_TYPES 
    ADD CONSTRAINT SIGNAL_TYPES_SIGNAL_OBJEC_FK1 FOREIGN KEY 
    ( 
     OBJECT_CODE
    ) 
    REFERENCES SIGNAL_OBJECT_TYPES 
    ( 
     OBJECT_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE SIGNAL_TYPES 
    ADD CONSTRAINT SIGNAL_TYPES_SIGNAL_SIGNI_FK FOREIGN KEY 
    ( 
     SIGNIFICANCE_CODE
    ) 
    REFERENCES SIGNAL_SIGNIFICANCE_TYPES 
    ( 
     SIGNIFICANCE_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE SOLUTIONS 
    ADD CONSTRAINT SOLUTIONS_EMPLOYEES_FK FOREIGN KEY 
    ( 
     AUTHOR
    ) 
    REFERENCES EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE SOLUTIONS 
    ADD CONSTRAINT SOLUTIONS_SOLUTION_TYPES_FK FOREIGN KEY 
    ( 
     SOLUTION_CODE
    ) 
    REFERENCES SOLUTION_TYPES 
    ( 
     SOLUTION_CODE
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE SUPPORTING_SERVICES 
    ADD CONSTRAINT SUPPORTING_SERVICES_SERVI_FK1 FOREIGN KEY 
    ( 
     SERVICE_ID
    ) 
    REFERENCES SERVICES 
    ( 
     SERVICE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE SUPPORTING_SERVICES 
    ADD CONSTRAINT SUPPORTING_SERVICES_SERVI_FK2 FOREIGN KEY 
    ( 
     SUPPORTING_SERVICE_ID
    ) 
    REFERENCES SERVICES 
    ( 
     SERVICE_ID
    ) 
    NOT DEFERRABLE 
;

CREATE OR REPLACE VIEW CATEGORIES_EM_V AS SELECT c1.name AS main_category,
    NULL         AS sub_category,
    NULL         AS sub_sub_category,
    category_code,
    name
  FROM categories_em c1
  WHERE c1.parent_category IS NULL
  UNION ALL
  SELECT c2.name AS main_category,
    c1.name      AS sub_category,
    NULL         AS sub_sub_category,
    c1.category_code,
    c1.name
  FROM categories_em c1
  JOIN categories_em c2
  ON c1.parent_category     = c2.category_code
  WHERE c2.parent_category IS NULL
  UNION ALL
  SELECT c3.name AS main_category,
    c2.name      AS sub_category,
    c1.name      AS sub_sub_category,
    c1.category_code,
    c1.name
  FROM categories_em c1
  JOIN categories_em c2
  ON c1.parent_category = c2.category_code
  JOIN categories_em c3
  ON c2.parent_category     = c3.category_code
  WHERE c3.parent_category IS NULL
  UNION ALL
  SELECT c4.name AS main_category,
    c3.name      AS sub_category,
    c2.name      AS sub_sub_category,
    c1.category_code,
    c1.name
  FROM categories_em c1
  JOIN categories_em c2
  ON c1.parent_category = c2.category_code
  JOIN categories_em c3
  ON c2.parent_category = c3.category_code
  JOIN categories_em c4
  ON c3.parent_category     = c4.category_code
  WHERE c4.parent_category IS NULL
  UNION ALL
  SELECT c5.name AS main_category,
    c4.name      AS sub_category,
    c3.name      AS sub_sub_category,
    c1.category_code,
    c1.name
  FROM categories_em c1
  JOIN categories_em c2
  ON c1.parent_category = c2.category_code
  JOIN categories_em c3
  ON c2.parent_category = c3.category_code
  JOIN categories_em c4
  ON c3.parent_category = c4.category_code
  JOIN categories_em c5
  ON c4.parent_category     = c3.category_code
  WHERE c5.parent_category IS NULL ;



CREATE OR REPLACE VIEW CATEGORIES_IM_V AS select
  c1.name as main_category, null as sub_category, null as sub_sub_category, category_code, name
from
  categories_im c1
where
  c1.parent_category is null
union all
select
  c2.name as main_category, c1.name as sub_category, null as sub_sub_category, c1.category_code, c1.name
from
  categories_im c1
  join categories_im c2 on c1.parent_category = c2.category_code
where
  c2.parent_category is null
union all
select
  c3.name as main_category, c2.name as sub_category, c1.name as sub_sub_category, c1.category_code, c1.name
from
  categories_im c1
  join categories_im c2 on c1.parent_category = c2.category_code
  join categories_im c3 on c2.parent_category = c3.category_code
where
  c3.parent_category is null
union all
select
  c4.name as main_category, c3.name as sub_category, c2.name as sub_sub_category, c1.category_code, c1.name
from
  categories_im c1
  join categories_im c2 on c1.parent_category = c2.category_code
  join categories_im c3 on c2.parent_category = c3.category_code
  join categories_im c4 on c3.parent_category = c4.category_code
where
  c4.parent_category is null 
union all
select
  c5.name as main_category, c4.name as sub_category, c3.name as sub_sub_category, c1.category_code, c1.name
from
  categories_im c1
  join categories_im c2 on c1.parent_category = c2.category_code
  join categories_im c3 on c2.parent_category = c3.category_code
  join categories_im c4 on c3.parent_category = c4.category_code
  join categories_im c5 on c4.parent_category = c3.category_code
where
  c5.parent_category is null ;



CREATE OR REPLACE VIEW CATEGORIES_PM_V AS select
  c1.name as main_category, null as sub_category, null as sub_sub_category, category_code, name
from
  categories_pm c1
where
  c1.parent_category is null
union all
select
  c2.name as main_category, c1.name as sub_category, null as sub_sub_category, c1.category_code, c1.name
from
  categories_pm c1
  join categories_pm c2 on c1.parent_category = c2.category_code
where
  c2.parent_category is null
union all
select
  c3.name as main_category, c2.name as sub_category, c1.name as sub_sub_category, c1.category_code, c1.name
from
  categories_pm c1
  join categories_pm c2 on c1.parent_category = c2.category_code
  join categories_pm c3 on c2.parent_category = c3.category_code
where
  c3.parent_category is null
union all
select
  c4.name as main_category, c3.name as sub_category, c2.name as sub_sub_category, c1.category_code, c1.name
from
  categories_pm c1
  join categories_pm c2 on c1.parent_category = c2.category_code
  join categories_pm c3 on c2.parent_category = c3.category_code
  join categories_pm c4 on c3.parent_category = c4.category_code
where
  c4.parent_category is null 
union all
select
  c5.name as main_category, c4.name as sub_category, c3.name as sub_sub_category, c1.category_code, c1.name
from
  categories_pm c1
  join categories_pm c2 on c1.parent_category = c2.category_code
  join categories_pm c3 on c2.parent_category = c3.category_code
  join categories_pm c4 on c3.parent_category = c4.category_code
  join categories_pm c5 on c4.parent_category = c3.category_code
where
  c5.parent_category is null ;



CREATE OR REPLACE VIEW EVENTS_V AS SELECT e.event_id,
    e.subject ,
    e.creation_date ,
    extract(YEAR FROM e.creation_date)  AS creation_year ,
    extract(MONTH FROM e.creation_date) AS creation_month ,
    TO_CHAR(e.creation_date, 'month')   AS creation_month_name ,
    e.event_date ,
    extract(YEAR FROM e.event_date)  AS event_year ,
    extract(MONTH FROM e.event_date) AS event_month ,
    TO_CHAR(e.event_date, 'month')   AS event_month_name ,
    c.main_category ,
    coalesce(c.sub_category, 'BRAK') as sub_category ,
    c.sub_sub_category ,
    c.name AS category ,
    es.name as significance,
    case when e.incident_id is NULL then 'NIE' else 'TAK' end as incident
FROM events e
LEFT JOIN categories_em_v c
ON e.category_code = c.category_code
LEFT JOIN event_significance_types es on es.significance_code = e.significance_code ;



CREATE OR REPLACE VIEW INCIDENTS_V AS SELECT i.incident_id ,
    i.subject ,
    i.creation_date ,
    extract(DAY FROM i.creation_date)   AS creation_day ,
    extract(YEAR FROM i.creation_date)  AS creation_year ,
    extract(MONTH FROM i.creation_date) AS creation_month ,
    'Q'
    || TO_CHAR(i.creation_date, 'Q ') AS creation_quarter ,
    TO_CHAR(i.creation_date, 'month') AS creation_month_name ,
    c.main_category ,
    c.sub_category ,
    c.sub_sub_category ,
    c.name AS category ,
    c.category_code,
    i.closure_date ,
    extract(YEAR FROM i.closure_date)  AS closure_year ,
    extract(MONTH FROM i.closure_date) AS closure_month ,
    extract(DAY FROM i.closure_date)   AS closure_day ,
    TO_CHAR(i.closure_date, 'month')   AS closure_month_name ,
    i.resolution_date ,
    extract(YEAR FROM i.resolution_date)  AS resolution_year ,
    extract(MONTH FROM i.resolution_date) AS resolution_month ,
    extract(DAY FROM i.resolution_date)   AS resolution_day ,
    TO_CHAR(i.resolution_date, 'month')   AS resolution_month_name ,
    i.target_resolution_date,
    COALESCE(p.name, 'NULL')              AS priority ,
    p.priority_code,
    COALESCE(s.name, 'NULL')              AS status ,
    s.status_code,
    COALESCE(sot.name, 'NULL')            AS source ,
    sot.source_code,
    COALESCE(e_gr.name
    || ' '
    || e_gr.surname, 'BRAK')  AS staff_member ,
    e_gr.employee_id as staff_member_id,
    COALESCE(gr.name, 'BRAK') AS support_group ,
    gr.group_id,
    i.author
  FROM incidents i
  LEFT JOIN categories_im_v c
  ON i.category_code = c.category_code
  LEFT JOIN priority_types_im p
  ON p.priority_code = i.priority_code
  LEFT JOIN statuses_im s
  ON s.status_code = i.status_code
  LEFT JOIN source_types_im sot
  ON sot.source_code = i.source_code
  LEFT JOIN employees e_gr
  ON e_gr.employee_id = i.staff_member
  LEFT JOIN support_groups gr
  ON gr.group_id = i.group_id ;



CREATE OR REPLACE VIEW KNOWN_ERRORS_V AS select p.problem_id, p.subject as subject, p.symptoms, p.root_cause, s.description as workaround, p.category_code
from solutions s join problems p on p.problem_id = s.problem_id
where s.solution_code = 'WORK' and p.is_known_error = 'T' ;



CREATE OR REPLACE VIEW PROBLEMS_V AS select
  i.problem_id
  , i.subject
  , i.creation_date
  , extract(year from i.creation_date) as creation_year
  ,  'Q' || to_char(i.creation_date, 'Q ') as creation_quarter
  , extract(month from i.creation_date) as creation_month
  , extract(day from i.creation_date) as creation_day
  , to_char(i.creation_date, 'month') as creation_month_name
  , c.main_category
  , c.sub_category
  , c.sub_sub_category 
  , c.name as category
  , c.category_code
  , i.closure_date
  , extract(year from i.closure_date) as closure_year
  , extract(month from i.closure_date) as closure_month
  , extract(day from i.closure_date) as closure_day
  , to_char(i.closure_date, 'month') as closure_month_name
  , p.name as priority
  , p.priority_code
  , s.name as status
  , s.status_code
  , coalesce(e_gr.name || ' ' || e_gr.surname, 'BRAK') as staff_member
  , e_gr.employee_id as staff_member_id
  , coalesce(gr.name, 'BRAK') as support_group
  , gr.group_id
from
  problems i
  left join categories_pm_v c on i.category_code = c.category_code
  left join priority_types_pm p on p.priority_code = i.priority_code
  left join statuses_pm s on s.status_code = i.status_code
  left join employees e_gr on e_gr.employee_id = i.staff_member
  left join support_groups gr on gr.group_id = i.group_id ;



CREATE SEQUENCE ANNOUNCEMENTS_SEQ 
;

CREATE SEQUENCE ATTACHMENTS_SEQ 
;

CREATE SEQUENCE AUDITREVISION_SEQ 
;

CREATE SEQUENCE AUTHORITIES_SEQ 
;

CREATE SEQUENCE C2_CLASS_ATTRIBUTES_SEQ 
    START WITH 3000 
;

CREATE SEQUENCE C2_CLASS_SEQ 
    START WITH 3000 
;

CREATE SEQUENCE C2_ENTITIES_SEQ 
    START WITH 3000 
;

CREATE SEQUENCE CLIENTS_SEQ 
;

CREATE SEQUENCE COMMENT_ID_SEQ 
;

CREATE SEQUENCE COOPERANTS_SEQ 
;

CREATE SEQUENCE EMPLOYEE_ID_SEQ 
;

CREATE SEQUENCE EVENT_ID_SEQ 
;

CREATE SEQUENCE HIBERNATE_SEQUENCE 
;

CREATE SEQUENCE HISTORY_ID_SEQ 
;

CREATE SEQUENCE INCIDENT_HISTORY_ID_SEQ 
;

CREATE SEQUENCE NOTIFICATIONS_SEQ 
;

CREATE SEQUENCE ORGANIZATIONS_SEQ 
;

CREATE SEQUENCE PARAMETER_ID_SEQ 
;

CREATE SEQUENCE REQ_ATTR_ID_SEQ 
;

CREATE SEQUENCE RFC_AUTHORITIES_SEQ 
;

CREATE SEQUENCE RFC_CATEGORIES_SEQ 
    START WITH 1000 
;

CREATE SEQUENCE RFC_IMPACTS_SEQ 
    START WITH 1000 
;

CREATE SEQUENCE RFC_PRIORITIES_SEQ 
    START WITH 1000 
;

CREATE SEQUENCE RFC_RESOLUTIONS_SEQ 
    START WITH 1000 
;

CREATE SEQUENCE RFC_SEQ 
;

CREATE SEQUENCE SIGNAL_GENERATOR_ID_SEQ 
;

CREATE SEQUENCE SIGNAL_ID_SEQ 
;

CREATE SEQUENCE SIGNAL_PARAM_ID_SEQ 
;

CREATE SEQUENCE SIGNAL_TYPE_ID_SEQ 
;

CREATE SEQUENCE SOLUTION_ID_SEQ 
;

CREATE SEQUENCE SUPPORT_GROUP_ID 
;

CREATE SEQUENCE USERS_SEQ 
;

CREATE OR REPLACE TRIGGER INCIDENT_HISTORY_TRG 
    AFTER INSERT OR UPDATE ON INCIDENTS 
    FOR EACH ROW 
DECLARE
    history_id_v number;
    employee_id_v number;
BEGIN
   
  select HISTORY_ID_SEQ.nextval, app.get_user into history_id_v, employee_id_v from dual;
  
  insert into incidents_history(
    HISTORY_ID
    ,CHANGE_DATE
    ,EMPLOYEE_ID
    ,INCIDENT_ID
    ,IMPACT_CODE
    ,URGENCY_CODE
    ,STATUS_CODE
    ,REVIEW
    ,PRIORITY_CODE
    ,CATEGORY_CODE
    ,SUBJECT
    ,DESCRIPTION
    ,STAFF_MEMBER
    ,RESOLUTION
    ,SOURCE_CODE
    ,RESOLUTION_DATE
    ,GROUP_ID
    ,TARGET_RESOLUTION_DATE
  )
  values(
    history_id_v
    , sysdate
    , employee_id_v
    , :new.INCIDENT_ID
    , :new.IMPACT_CODE
    , :new.URGENCY_CODE
    , :new.STATUS_CODE
    , :new.REVIEW
    , :new.PRIORITY_CODE
    , :new.CATEGORY_CODE
    , :new.SUBJECT
    , :new.DESCRIPTION
    , :new.STAFF_MEMBER
    , :new.RESOLUTION
    , :new.SOURCE_CODE
    , :new.RESOLUTION_DATE
    , :new.GROUP_ID
    , :new.TARGET_RESOLUTION_DATE
  );
  
END; 
/


CREATE OR REPLACE TRIGGER INCIDENT_SIGNALS_TRG 
    BEFORE INSERT OR UPDATE ON INCIDENTS 
    FOR EACH ROW 
BEGIN
  IF :old.STATUS_CODE <> :new.STATUS_CODE THEN
    --powiadomienie autora o zmianie statusu
    insert into signals_tmp(type_code, employee_id, object_id) values(1, :new.AUTHOR, :new.INCIDENT_ID);
  END IF;
  
  IF coalesce(:old.STAFF_MEMBER,-1) <> coalesce(:new.STAFF_MEMBER,-1) THEN
    IF :old.STAFF_MEMBER is not NULL THEN
       --powiadomienie serwisanta o odpisaniu incydentu
       insert into signals_tmp(type_code, employee_id, object_id) values(11, :old.STAFF_MEMBER, :new.INCIDENT_ID);
    END IF;
    IF :new.STAFF_MEMBER is not NULL THEN
        --powiadomienie serwisanta o przypisaniu incydentu
       insert into signals_tmp(type_code, employee_id, object_id) values(10, :new.STAFF_MEMBER, :new.INCIDENT_ID);
    END IF;
  END IF;
  
  IF coalesce(:old.GROUP_ID,-1) <> coalesce(:new.GROUP_ID,-1) THEN
    IF :old.GROUP_ID is not NULL THEN    
       --powiadomienie menedzera grupy o odpisaniu incydentu
       insert into signals_tmp(type_code, employee_id, object_id) values(13, (select manager_id from support_groups where group_id = :old.GROUP_ID), :new.INCIDENT_ID);
    END IF;
    IF :new.GROUP_ID is not NULL THEN
        --powiadomienie menedzera grupy o przypisaniu incydentu
       insert into signals_tmp(type_code, employee_id, object_id) values(12, (select manager_id from support_groups where group_id = :new.GROUP_ID), :new.INCIDENT_ID);
    END IF;
  END IF;
  
END; 
/


CREATE OR REPLACE TRIGGER INCIDENT_SIGNALS_TRG2 
    AFTER INSERT OR UPDATE ON INCIDENTS 
    FOR EACH ROW 
BEGIN
  FOR s IN (SELECT * FROM SIGNALS_TMP) LOOP
    ADD_SIGNAL(s.type_code, s.employee_id, s.object_id);
  END LOOP;
END; 
/


CREATE OR REPLACE TRIGGER c2_autoinsert_employees 
    AFTER INSERT ON EMPLOYEES REFERENCING 
    NEW AS employee 
    FOR EACH ROW 
BEGIN
    INSERT INTO C2_ENTITIES (ENTITY_ID, VERSION)
        VALUES (C2_ENTITIES_SEQ.nextval, 0);
		
	INSERT INTO C2_ITEMS (ITEM_ID, LABEL)
        VALUES (C2_ENTITIES_SEQ.currval, 'PRACOWNIK #' || to_char(:employee.EMPLOYEE_ID));

    INSERT INTO C2_ITEMS_EMPLOYEE (ITEM_ID, EMPLOYEE_ID)
        VALUES (C2_ENTITIES_SEQ.currval, :employee.EMPLOYEE_ID);
END; 
/


CREATE OR REPLACE TRIGGER c2_autoinsert_incidents 
    AFTER INSERT ON INCIDENTS REFERENCING 
    NEW AS incident 
    FOR EACH ROW 
BEGIN
    INSERT INTO C2_ENTITIES (ENTITY_ID, VERSION)
        VALUES (C2_ENTITIES_SEQ.nextval, 0);
		
	INSERT INTO C2_ITEMS (ITEM_ID, LABEL)
        VALUES (C2_ENTITIES_SEQ.currval, 'INCYDENT #' || to_char(:incident.INCIDENT_ID));

    INSERT INTO C2_ITEMS_INCIDENT (ITEM_ID, INCIDENT_ID)
        VALUES (C2_ENTITIES_SEQ.currval, :incident.INCIDENT_ID);
END; 
/


CREATE OR REPLACE TRIGGER c2_autoinsert_problems 
    AFTER INSERT ON PROBLEMS REFERENCING 
    NEW AS problem 
    FOR EACH ROW 
BEGIN
    INSERT INTO C2_ENTITIES (ENTITY_ID, VERSION)
        VALUES (C2_ENTITIES_SEQ.nextval, 0);
		
	INSERT INTO C2_ITEMS (ITEM_ID, LABEL)
        VALUES (C2_ENTITIES_SEQ.currval, 'PROBLEM#' || to_char(:problem.PROBLEM_ID));

    INSERT INTO C2_ITEMS_PROBLEM (ITEM_ID, PROBLEM_ID)
        VALUES (C2_ENTITIES_SEQ.currval, :problem.PROBLEM_ID);
END; 
/


CREATE OR REPLACE TRIGGER c2_autoinsert_services 
    AFTER INSERT ON SERVICES REFERENCING 
    NEW AS service 
    FOR EACH ROW 
BEGIN
    INSERT INTO C2_ENTITIES (ENTITY_ID, VERSION) VALUES (C2_ENTITIES_SEQ.nextval, 0);
		
    INSERT INTO C2_ITEMS (ITEM_ID, LABEL) VALUES (C2_ENTITIES_SEQ.currval, 'US£UGA#' || to_char(:service.SERVICE_ID));

    INSERT INTO C2_ITEMS_SERVICE (ITEM_ID, SERVICE_ID) VALUES (C2_ENTITIES_SEQ.currval, :service.SERVICE_ID);
END; 
/



create or replace
PROCEDURE ADD_SIGNAL 
(
  type_code_v IN VARCHAR2  
, employee_id_v IN NUMBER  
, object_id_v IN NUMBER  
) AS
    object_code_v char;
    view_name_v varchar2(30);
    signal_id_v number;
    ir incidents_v%rowtype;
    pr problems_v%rowtype;
BEGIN
    select st.object_code, ot.view_name into object_code_v, view_name_v
    from signal_types st join signal_object_types ot on ot.object_code = st.object_code
    where st.type_code = type_code_v;
    
    insert into signals(SIGNAL_ID, CREATION_DATE,IS_SENT,EMPLOYEE_ID,TYPE_CODE,OBJECT_ID)
    values(signal_id_seq.nextval + 10000000 , sysdate, 'F', employee_id_v, type_code_v, object_id_v)
    returning signal_id
    INTO signal_id_v;
    

    IF object_code_v = 'I' THEN
        select * into ir from incidents_v where incident_id = object_id_v;
        
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'ISTA', ir.STATUS);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'IPRI', ir.PRIORITY);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'IRSm', ir.RESOLUTION_MONTH_NAME);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'IRSd', ir.RESOLUTION_DAY);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'IRSM', ir.RESOLUTION_MONTH);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'IRSY', ir.RESOLUTION_YEAR);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'IRSD', ir.RESOLUTION_DATE);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'ICLm', ir.CLOSURE_MONTH_NAME);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'ICLd', ir.CLOSURE_DAY);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'ICLM', ir.CLOSURE_MONTH);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'ICLY', ir.CLOSURE_YEAR);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'ICLD', ir.CLOSURE_DATE);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'ICTE', ir.CATEGORY);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'ICT3', ir.SUB_SUB_CATEGORY);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'ICT2', ir.SUB_CATEGORY);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'ICT1', ir.MAIN_CATEGORY);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'IC8m', ir.CREATION_MONTH_NAME);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'IC8Q', ir.CREATION_QUARTER);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'IC8M', ir.CREATION_MONTH);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'IC8Y', ir.CREATION_YEAR);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'IC8d', ir.CREATION_DAY);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'IC8D', ir.CREATION_DATE);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'ISUB', ir.SUBJECT);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'IID ', ir.INCIDENT_ID);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'ISG ', ir.SUPPORT_GROUP);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'ISM ', ir.STAFF_MEMBER);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'ISRC', ir.SOURCE);
    
    ELSIF object_code_v = 'P' THEN
        select * into pr from problems_v where problem_id = object_id_v;
        
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PSG ', pr.SUPPORT_GROUP);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PSM ', pr.STAFF_MEMBER);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PSTA', pr.STATUS);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PPRI', pr.PRIORITY);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PCLm', pr.CLOSURE_MONTH_NAME);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PCLd', pr.CLOSURE_DAY);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PCLM', pr.CLOSURE_MONTH);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PCLY', pr.CLOSURE_YEAR);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PCLD', pr.CLOSURE_DATE);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PCT0', pr.CATEGORY);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PCT3', pr.SUB_SUB_CATEGORY);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PCT2', pr.SUB_CATEGORY);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PCT1', pr.MAIN_CATEGORY);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PC8m', pr.CREATION_MONTH_NAME);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PC8d', pr.CREATION_DAY);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PC8M', pr.CREATION_MONTH);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PC8Q', pr.CREATION_QUARTER);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PC8Y', pr.CREATION_YEAR);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PC8D', pr.CREATION_DATE);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PSUB', pr.SUBJECT);
        insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval + 10000000,signal_id_v,'PID ', pr.PROBLEM_ID);
    END IF;
/*

select
--ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE
    'insert into signal_attributes(ATTRIBUTE_ID,SIGNAL_ID,ATTRIBUTE_CODE,ATTRIBUTE_VALUE) values( SIGNAL_PARAM_ID_SEQ.nextval,signal_id_v,''' || soat.attribute_code || ''', r.' || soat.attribute_name || ');'
from
    user_tab_cols utc
    join signal_object_types sot on upper(utc.table_name) = upper(sot.view_name)
    join signal_object_attribute_types soat on soat.object_code = sot.object_code and upper(soat.attribute_name) = upper(utc.column_name)
where table_name = 'INCIDENTS_V'

*/

END ADD_SIGNAL;
/

CREATE OR REPLACE PACKAGE APP AS 
  CURRENT_USER_ID NUMBER := 0;
  
  PROCEDURE set_user(user_id NUMBER);
  FUNCTION get_user RETURN NUMBER;
END;
/

CREATE OR REPLACE PACKAGE BODY APP AS 
  PROCEDURE set_user(user_id NUMBER) AS
  BEGIN
    CURRENT_USER_ID := user_id;
  END set_user;

  FUNCTION get_user RETURN NUMBER AS
  BEGIN
    RETURN CURRENT_USER_ID;
  END get_user;
END;
/




































































































-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            91
-- CREATE INDEX                             2
-- ALTER TABLE                            245
-- CREATE VIEW                              7
-- CREATE PACKAGE                           1
-- CREATE PACKAGE BODY                      1
-- CREATE PROCEDURE                         1
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           7
-- CREATE STRUCTURED TYPE                   0
-- CREATE COLLECTION TYPE                   0
-- CREATE CLUSTER                           2
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                         32
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
